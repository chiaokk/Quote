private void DealWithTse()
        {
            string InformationSeq;
            string InformationTime;
            int Packetlength = 0;
            int StkCnt = 0;

            string sCommodityId;
            string sCommodityNm;
            string stkProperty;
            string stkState;
            //int sCommodityCode = 0;
            int sUnusualCode = 0;
            double sRiseLimitPrice = 0.0;
            double sReferencePrice = 0.0;
            double sFallLimitPrice = 0.0;

            int sDisPlayTag = 0;
            int sFallRiseTag = 0;
            int nResult = 0;
            int nStatusTag = 0;
            int nPos = 0;

            string MatchTime;
            double MatchPrice = 0.0;
            int MatchQuantity = 0;
            int MatchTOTALQty = 0;
            int oldMatchTOTALQty = 0;

            double HighPrice = 0.0;
            double LowPrice = 0.0;
            double OpenPrice = 0.0;
            double ClosePrice = 0.0;
            double SettlePrice = 0.0;
            string ShowTime;

            double AccountSum = 0;
            int AccountQuantity = 0;
            int AccountOrder = 0;
            double AccountSumTotal = 0;
            int AccountQuantityTotal = 0;
            int AccountOrderTotal = 0;

            int BuyOrder = 0;
            int BuyQuantity = 0;
            int SellOrder = 0;
            int SellQuantity = 0;

            string BultinKey;
            string BultinData;

            string IndexCode = "";
            int IndexItems = 0;
            double IndexValue = 0.0;

            double BuyPriceBest1 = 0.0;
            int BuyQtyBest1 = 0;
            double BuyPriceBest2 = 0.0;
            int BuyQtyBest2 = 0;
            double BuyPriceBest3 = 0.0;
            int BuyQtyBest3 = 0;
            double BuyPriceBest4 = 0.0;
            int BuyQtyBest4 = 0;
            double BuyPriceBest5 = 0.0;
            int BuyQtyBest5 = 0;
            double SellPriceBest1 = 0.0;
            int SellQtyBest1 = 0;
            double SellPriceBest2 = 0.0;
            int SellQtyBest2 = 0;
            double SellPriceBest3 = 0.0;
            int SellQtyBest3 = 0;
            double SellPriceBest4 = 0.0;
            int SellQtyBest4 = 0;
            double SellPriceBest5 = 0.0;
            int SellQtyBest5 = 0;

            double oldBuyPriceBest1 = 0.0;
            int oldBuyQtyBest1 = 0;
            double oldBuyPriceBest2 = 0.0;
            int oldBuyQtyBest2 = 0;
            double oldBuyPriceBest3 = 0.0;
            int oldBuyQtyBest3 = 0;
            double oldBuyPriceBest4 = 0.0;
            int oldBuyQtyBest4 = 0;
            double oldBuyPriceBest5 = 0.0;
            int oldBuyQtyBest5 = 0;
            double oldSellPriceBest1 = 0.0;
            int oldSellQtyBest1 = 0;
            double oldSellPriceBest2 = 0.0;
            int oldSellQtyBest2 = 0;
            double oldSellPriceBest3 = 0.0;
            int oldSellQtyBest3 = 0;
            double oldSellPriceBest4 = 0.0;
            int oldSellQtyBest4 = 0;
            double oldSellPriceBest5 = 0.0;
            int oldSellQtyBest5 = 0;

            bool IsDepthChange = false;

            int sLeftQty = 0;
            double sStrikePrice = 0.0;
            double sExecRatio = 0.0;
            double sBarrier = 0.0;
            string sMaturity = "";

            int Unit = 0;
            int Match_seq;
            int Tse_Match_seq = 0;
            int Tse_PacketLost_Qty = 0;

            string CurrencyId = "";
            string nkindflag = "";

            byte[] sCheckSum;
            byte[] bte;

            PCommodity mPCommodity = null;

            try
            {
                while (true)
                {
                    if (!InitialOK) { continue; }

                    while (m_PackagePool.Count > 0)
                    {
                        try
                        {
                            mPCommodity = null;

                            bte = (byte[])m_PackagePool.Dequeue();

                            if (!CMarket.IsTrade)
                                continue;

                            Packetlength = int.Parse(int.Parse(bte[1].ToString("x")).ToString("00") + int.Parse(bte[2].ToString("x")).ToString("00"));
                            InformationSeq = int.Parse(bte[6].ToString("x")).ToString("00") + int.Parse(bte[7].ToString("x")).ToString("00") + int.Parse(bte[8].ToString("x")).ToString("00") + int.Parse(bte[9].ToString("x")).ToString("00");
                            sCheckSum = new byte[Packetlength - 3];

                            int tCode = int.Parse(bte[4].ToString("x"));

                            if (!m_QuoteSetting.IsRegisterAll)
                            {
                                string gCommodityId = "";
                                int gCommodityCode = 0;

                                /*if (tCode == 1)
                                {
                                    gCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();

                                    mPCommodity = m_PCommodityList.Get(gCommodityId);
                                    if (mPCommodity == null)
                                        continue;
                                }
                                else if (tCode == 1 || tCode == 6 || tCode == 9)
                                {
                                    gCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));

                                    mPCommodity = m_CMarket.GetInnerCode(gCommodityCode.ToString());
                                    if (mPCommodity == null)
                                        continue;
                                }*/

                                if (tCode == 1 || tCode == 6 || tCode == 9)
                                {
                                    gCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                    mPCommodity = m_PCommodityList.Get(gCommodityId);

                                    if (mPCommodity == null)
                                        continue;
                                }    
                            }

                            m_PacketNum++;

                            /*if (tCode == 1 || tCode == 6 || tCode == 9)
                            {
                                if (System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim() != "2515")
                                    continue;
                            }*/
                            //if (!(tCode == 1 || tCode == 6 || tCode == 17)) { continue; }

                            //if (tCode != 19) { continue; }

                            #region //TRANSMISSION_CODE
                            switch (tCode)
                            {  
                                case 1:
                                    #region //集中市場個股基本資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse01 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();

                                        if (sCommodityId == "000000") { break; }

                                        if (sCommodityId == "04090P")
                                            sCommodityId = sCommodityId;
                                       
                                        //2015/10/19 新格式
                                        sCommodityNm = System.Text.UnicodeEncoding.Default.GetString(bte, 16, 16).Trim();
                                        stkProperty = System.Text.UnicodeEncoding.Default.GetString(bte, 32, 2).Trim();
                                        stkState = System.Text.UnicodeEncoding.Default.GetString(bte, 34, 2).Trim();
                                        sUnusualCode = int.Parse(bte[38].ToString("x"));
                                        sReferencePrice = double.Parse(int.Parse(bte[39].ToString("x")).ToString("00") + int.Parse(bte[40].ToString("x")).ToString("00") + int.Parse(bte[41].ToString("x")).ToString("00")) / 100;
                                        sRiseLimitPrice = double.Parse(int.Parse(bte[42].ToString("x")).ToString("00") + int.Parse(bte[43].ToString("x")).ToString("00") + int.Parse(bte[44].ToString("x")).ToString("00")) / 100;
                                        sFallLimitPrice = double.Parse(int.Parse(bte[45].ToString("x")).ToString("00") + int.Parse(bte[46].ToString("x")).ToString("00") + int.Parse(bte[47].ToString("x")).ToString("00")) / 100;

                                        string IsWarrantFlag = System.Text.UnicodeEncoding.Default.GetString(bte, 57, 1).Trim();
                                        sStrikePrice = double.Parse(int.Parse(bte[58].ToString("x")).ToString("00") + int.Parse(bte[59].ToString("x")).ToString("00") + int.Parse(bte[60].ToString("x")).ToString("00") + int.Parse(bte[61].ToString("x")).ToString("00")) / 100;
                                        sLeftQty = int.Parse(int.Parse(bte[72].ToString("x")).ToString("00") + int.Parse(bte[73].ToString("x")).ToString("00") + int.Parse(bte[74].ToString("x")).ToString("00") + int.Parse(bte[75].ToString("x")).ToString("00") + int.Parse(bte[76].ToString("x")).ToString("00"));
                                        sExecRatio = double.Parse(int.Parse(bte[77].ToString("x")).ToString("00") + int.Parse(bte[78].ToString("x")).ToString("00") + int.Parse(bte[79].ToString("x")).ToString("00") + int.Parse(bte[80].ToString("x")).ToString("00")) / 100 / 1000;
                                        sBarrier = double.Parse(int.Parse(bte[81].ToString("x")).ToString("00") + int.Parse(bte[82].ToString("x")).ToString("00") + int.Parse(bte[83].ToString("x")).ToString("00") + int.Parse(bte[84].ToString("x")).ToString("00")) / 100;
                                        if (sBarrier == 0.0) { sBarrier = double.Parse(int.Parse(bte[85].ToString("x")).ToString("00") + int.Parse(bte[86].ToString("x")).ToString("00") + int.Parse(bte[87].ToString("x")).ToString("00") + int.Parse(bte[88].ToString("x")).ToString("00")) / 100; }
                                        double intmaturity = double.Parse(int.Parse(bte[89].ToString("x")).ToString("00") + int.Parse(bte[90].ToString("x")).ToString("00") + int.Parse(bte[91].ToString("x")).ToString("00") + int.Parse(bte[92].ToString("x")).ToString("00"));
                                        sMaturity = "";
                                        if (intmaturity > 0) { sMaturity = intmaturity.ToString().Substring(0, 4) + "/" + intmaturity.ToString().Substring(4, 2) + "/" + intmaturity.ToString().Substring(6, 2); }
                                        Unit = int.Parse(int.Parse(bte[94].ToString("x")).ToString("00") + int.Parse(bte[95].ToString("x")).ToString("00") + int.Parse(bte[96].ToString("x")).ToString("00"));
                                        CurrencyId = System.Text.UnicodeEncoding.Default.GetString(bte, 97, 3).Trim();
                                        
                                        if (TSECurrencyMap.ContainsKey(CurrencyId)) { CurrencyId = TSECurrencyMap[CurrencyId].ToString(); }

                                        if (CurrencyId == "") { CurrencyId = "NTD"; }

                                        if (m_QuoteSetting.IsWriteToDb)
                                            Util.ExecSqlCmd("EXEC spUpdateCurrency '" + sCommodityId + "','" + CurrencyId + "'", m_QuoteSetting.DBConnectString);

                                        //mPCommodity.CMarket.SetCommodity(sCommodityCode, mPCommodity);

                                        //if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone) || mPCommodity.QCommodity.Base.InformationSeq == null || mPCommodity.QCommodity.Base.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Base.InformationSeq) <= int.Parse(InformationSeq)))
                                        //{
                                            CommodityKind sCommodityKind = CommodityKind.Stock;
                                            CommodityType sCommodityType = CommodityType.None;
                                        
                                            GetCommodityKind(sCommodityId, ref sCommodityKind, ref sCommodityType);
                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, sCommodityKind);
                                            mPCommodity.IsLocalCommodity = true;    
                                            mPCommodity.SetBase(m_CMarket.Market, sCommodityKind, sCommodityType, "", sCommodityNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", InformationSeq, sReferencePrice, sRiseLimitPrice, sFallLimitPrice, Unit, "", stkProperty);
                                            DoSendWrite(mPCommodity.QCommodity.Base);

                                            if (IsWarrantFlag == "Y")
                                            {
                                                mPCommodity.SetExtra(sCommodityId, sStrikePrice, sExecRatio);
                                                if (m_QuoteSetting.IsWriteToDb)
                                                    Util.ExecSqlCmd("EXEC spWarrantExtra2 '" + sCommodityId + "'," + sStrikePrice + "," + sExecRatio + "," + sLeftQty + "," + sBarrier + ",'" + sMaturity + "'", m_QuoteSetting.DBConnectString);
                                                    //Util.ExecSqlCmd("EXEC spWarrantExtra '" + sCommodityId + "'," + sStrikePrice + "," + sExecRatio + "," + sLeftQty, m_QuoteSetting.DBConnectString);
                                            }                                      
                                            /*mPCommodity.Send(Base);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/                                            
                                        //}
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse01 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 2:
                                    #region //集中市場競價交易成交統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse02 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");

                                        mPCommodity = m_PCommodityList.Set("1000", "1000", m_CMarket.Market, CommodityKind.Index);

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None,"", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "",""); }

                                        if (InformationSeq == "00000000") { break; }

                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) <= int.Parse(InformationSeq)))
                                        {                                            
                                            AccountSumTotal = double.Parse(int.Parse(bte[13].ToString("x")).ToString("00") + int.Parse(bte[14].ToString("x")).ToString("00") + int.Parse(bte[15].ToString("x")).ToString("00") + int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00"));                                            
                                            AccountQuantityTotal = int.Parse(int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));
                                            AccountOrderTotal = int.Parse(int.Parse(bte[29].ToString("x")).ToString("00") + int.Parse(bte[30].ToString("x")).ToString("00") + int.Parse(bte[31].ToString("x")).ToString("00") + int.Parse(bte[32].ToString("x")).ToString("00") + int.Parse(bte[33].ToString("x")).ToString("00"));

                                            if (mPCommodity.QCommodity.Match != null)
                                            {
                                                AccountSum = AccountSumTotal - mPCommodity.QCommodity.Match.MatchTotalAmt;
                                                AccountQuantity = (int)(AccountQuantityTotal - mPCommodity.QCommodity.Match.MatchTotalQty);
                                                AccountOrder = (int)(AccountOrderTotal - mPCommodity.QCommodity.Match.MatchTotalCnt);
                                                MatchPrice = mPCommodity.QCommodity.Match.MatchPrice;
                                            }
                                            else
                                            {
                                                AccountSum = AccountSumTotal;
                                                AccountQuantity = AccountQuantityTotal;
                                                AccountOrder = AccountOrderTotal ;
                                                MatchPrice = 0.0;
                                            }

                                            if (!(AccountSum == 0.0 && AccountQuantity == 0 && AccountOrder == 0))
                                            {
                                                mPCommodity.SetMatch(InformationTime, InformationSeq, 2, InformationTime, MatchPrice, AccountQuantity, AccountSum, AccountSumTotal, AccountQuantityTotal, AccountOrderTotal, 0, 0);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                if (InformationTime != "999999")
                                                {
                                                    DoSendWrite(mPCommodity.QCommodity.Match);
                                                    WriteTicksLog(mPCommodity, InformationTime, MatchPrice, AccountSum, AccountSumTotal, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "2");
                                                }
                                                else
                                                    mPCommodity.QCommodity.Match.MatchSeq = 1;

                                                //Console.WriteLine("4 ---- " + mPCommodity.QCommodity.Match.MatchPrice + " ----- " + mPCommodity.QCommodity.Match.MatchTotalAmt / 100000000.0 + " ----- " + mPCommodity.QCommodity.Match.InformationSeq + " ----- " + mPCommodity.QCommodity.Match.InformationTime);
                                            }
                                            /*mPCommodity.Send(Match);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/
                                        }   
                                     
                                        //if (InformationTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.MatchTotalAmt == 0.0))
                                        if (InformationTime == "999999")
                                        {
                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            OpenPrice = 0.0;
                                            ClosePrice = 0.0;

                                            if (mPCommodity.QCommodity.Open != null)
                                                OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;                                                    
                                            }
                                            if (mPCommodity.QCommodity.Close != null)
                                                ClosePrice = mPCommodity.QCommodity.Close.ClosePrice;
                                            
                                            mPCommodity.SetClose(InformationTime,InformationSeq,HighPrice,LowPrice,OpenPrice,0.0,0.0,ClosePrice,TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone),AccountOrderTotal,AccountQuantityTotal,AccountSumTotal,ClosePrice);
                                            DoSendWrite(mPCommodity.QCommodity.Close);
                                            
                                            /*mPCommodity.Send(Close);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse02 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 3:
                                    #region //集中市場競價交易指數統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse03 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");
                                        IndexItems = int.Parse(int.Parse(bte[13].ToString("x")).ToString("00"));
                                        
                                        for (int k = 0; k < IndexItems; k++)
                                        {
                                            switch (k)
                                            {
                                                case 0:
                                                    IndexCode = "1000";//加　權 
                                                    break;
                                                case 1:
                                                    IndexCode = "1010";//無金融
                                                    break;
                                                case 2:
                                                    IndexCode = "1011";//無電子
                                                    break;
                                                case 3:
                                                    IndexCode = "1012";//化學工業類
                                                    break;
                                                case 4:
                                                    IndexCode = "1013";//生技醫療類
                                                    break;
                                                case 5:
                                                    IndexCode = "1001";//水泥類(原分類)
                                                    break;
                                                case 6:
                                                    IndexCode = "1002";//食品類(原分類)
                                                    break;
                                                case 7:
                                                    IndexCode = "1003";//塑化類(原分類)
                                                    break;
                                                case 8:
                                                    IndexCode = "1004";//紡纖類(原分類)
                                                    break;
                                                case 9:
                                                    IndexCode = "1005";//機電類(原分類)
                                                    break;
                                                case 10:
                                                    IndexCode = "1006";//造紙類(原分類)
                                                    break;
                                                case 11:
                                                    IndexCode = "1007";//營建類(原分類)
                                                    break;
                                                case 12:
                                                    IndexCode = "1008";//雜項類(原分類)
                                                    break;
                                                case 13:
                                                    IndexCode = "1009";//金融類(原分類)
                                                    break;
                                                case 14:
                                                    IndexCode = "1100";//水泥類
                                                    break;
                                                case 15:
                                                    IndexCode = "1200";//食品類
                                                    break;
                                                case 16:
                                                    IndexCode = "1300";//塑膠類
                                                    break;
                                                case 17:
                                                    IndexCode = "1400";//紡纖類
                                                    break;
                                                case 18:
                                                    IndexCode = "1500";//電機類
                                                    break;
                                                case 19:
                                                    IndexCode = "1600";//電器類
                                                    break;
                                                case 20:
                                                    IndexCode = "1700";//化工類
                                                    break;
                                                case 21:
                                                    IndexCode = "1800";//玻璃類
                                                    break;
                                                case 22:
                                                    IndexCode = "1900";//造紙類
                                                    break;
                                                case 23:
                                                    IndexCode = "2000";//鋼鐵類
                                                    break;
                                                case 24:
                                                    IndexCode = "2100";//橡膠類
                                                    break;
                                                case 25:
                                                    IndexCode = "2200";//汽車類
                                                    break;
                                                case 26:
                                                    IndexCode = "2300";//電子類
                                                    break;
                                                case 27:
                                                    IndexCode = "2500";//營建類
                                                    break;
                                                case 28:
                                                    IndexCode = "2600";//運輸類
                                                    break;
                                                case 29:
                                                    IndexCode = "2700";//觀光類
                                                    break;
                                                case 30:
                                                    IndexCode = "2800";//金融類
                                                    break;
                                                case 31:
                                                    IndexCode = "2900";//百貨類
                                                    break;
                                                case 32:
                                                    IndexCode = "9900";//其它類
                                                    break;
                                                case 33:
                                                    IndexCode = "1014";//無金融電子
                                                    break;
                                                case 34:
                                                    IndexCode = "1015";//油電燃氣類
                                                    break;
                                                case 35:
                                                    IndexCode = "1016";//半導體類
                                                    break;
                                                case 36:
                                                    IndexCode = "1017";//電腦週邊設備類
                                                    break;
                                                case 37:
                                                    IndexCode = "1018";//光電類
                                                    break;
                                                case 38:
                                                    IndexCode = "1019";//通信網路類
                                                    break;
                                                case 39:
                                                    IndexCode = "1020";//電子零組件類
                                                    break;
                                                case 40:
                                                    IndexCode = "1021";//電子通路類
                                                    break;
                                                case 41:
                                                    IndexCode = "1022";//資訊服務類
                                                    break;
                                                case 42:
                                                    IndexCode = "1023";//其他電子類
                                                    break;
                                                default:
                                                    break;
                                            }

                                            IndexValue = double.Parse(int.Parse(bte[14 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[15 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[16 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[17 + 4 * k].ToString("x")).ToString("00")) / 100;

                                            //if (IndexCode == "1000")
                                            //    Console.WriteLine("1 ---- " + IndexValue + " ----- " + InformationSeq + " ----- " + InformationTime);

                                            mPCommodity = m_PCommodityList.Set(IndexCode, IndexCode, m_CMarket.Market, CommodityKind.Index);
                                            mPCommodity.IsLocalCommodity = true;
                                            //mPCommodity.CMarket.SetCommodity(IndexCode, mPCommodity);
                                            CodeMap cm = m_CMarket.GetCodeMap(CommodityKind.Index,IndexCode);

                                            if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None,"", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "",""); }

                                            if (InformationSeq == "00000000")
                                            {
                                                mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, cm.Code, cm.CodeNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), InformationTime, InformationSeq, IndexValue, 0, 0, 1, "","");
                                                DoSendWrite(mPCommodity.QCommodity.Base);
                                                /*mPCommodity.Send(Base);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/
                                                continue;
                                            }
                                            if (InformationSeq == "00000002")
                                            {
                                                mPCommodity.SetOpen(InformationTime, IndexValue);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/

                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, IndexValue, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }
                                            //if (InformationTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (InformationTime == "999999")
                                            {
                                                HighPrice = 0.0;
                                                LowPrice = 0.0;
                                                OpenPrice = 0.0;
                                                AccountSumTotal = 0;
                                                AccountQuantityTotal = 0;
                                                AccountOrderTotal = 0;

                                                if (mPCommodity.QCommodity.Open != null)
                                                    OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                                if (mPCommodity.QCommodity.HighLow != null)
                                                {
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;                                                    
                                                }
                                                if(mPCommodity.QCommodity.Close != null)
                                                {
                                                    AccountSumTotal = mPCommodity.QCommodity.Close.MatchTotalAmt;
                                                    AccountQuantityTotal = mPCommodity.QCommodity.Close.MatchTotalQty;
                                                    AccountOrderTotal = mPCommodity.QCommodity.Close.MatchTotalCnt;
                                                }

                                                mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, IndexValue, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, IndexValue);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                                
                                            }

                                            //if (IndexCode == "1000")
                                            //    Console.WriteLine("2 ---- " + IndexValue + " ----- " + InformationSeq + " ----- " + InformationTime);

                                            //if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) < int.Parse(InformationSeq)) || InformationTime == "999999")
                                            //{
                                                AccountSumTotal = 0;
                                                AccountQuantityTotal = 0;
                                                AccountOrderTotal = 0;
                                                AccountSum = 0; 
                                                AccountQuantity = 0;
 
                                                if (mPCommodity.QCommodity.Match != null)
                                                {
                                                    AccountSum = mPCommodity.QCommodity.Match.MatchAmt;
                                                    AccountQuantity = mPCommodity.QCommodity.Match.MatchQty;
                                                    AccountSumTotal = mPCommodity.QCommodity.Match.MatchTotalAmt;
                                                    AccountQuantityTotal = mPCommodity.QCommodity.Match.MatchTotalQty;
                                                    AccountOrderTotal = mPCommodity.QCommodity.Match.MatchTotalCnt;
                                                }
                                                
                                                mPCommodity.SetMatch(InformationTime, InformationSeq, 1, InformationTime, IndexValue, AccountQuantity, AccountSum, AccountSumTotal, AccountQuantityTotal, AccountOrderTotal, 0, 0);

                                                /*if (IndexCode == "1000")
                                                {
                                                    ErrorProcess("[" + DateTime.Now.ToString() + "][" + IndexValue + "][" + InformationTime + "][" + InformationSeq + "]");
                                                }*/

                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                //mPCommodity.SetMatch(InformationTime, InformationSeq, 1, InformationTime, IndexValue,0,0);

                                                /*if (IndexCode == "1000")
                                                {
                                                    //Console.WriteLine("3 ---- " + mPCommodity.QCommodity.Match.MatchPrice + " ----- " + mPCommodity.QCommodity.Match.MatchTotalAmt / 100000000.0 + " ----- " + mPCommodity.QCommodity.Match.InformationSeq);
                                                    //if (IndexCode == "1000")
                                                    //    Console.WriteLine("2 ---- " + IndexValue + " ----- " + InformationSeq + " ----- " + InformationTime);

                                                    if (InformationTime == "999999")
                                                    {
                                                        mPCommodity.QCommodity.Match.MatchSeq = 2;
                                                        DoSendWrite(mPCommodity.QCommodity.Match);
                                                    }
                                                    else
                                                    {
                                                        if (m_QuoteSetting.IsSendTicks)
                                                            mPCommodity.Send(mPCommodity.QCommodity.Match.Copy());
                                                        else
                                                            mPCommodity.Send(mPCommodity.QCommodity.Match);
                                                    }
                                                }
                                                else
                                                {
                                                    DoSendWrite(mPCommodity.QCommodity.Match);
                                                }*/
                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                WriteTicksLog(mPCommodity, InformationTime, IndexValue, AccountSum, AccountSumTotal, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "1");

                                                HighPrice = 0.0;
                                                LowPrice = 0.0;
                                                if (mPCommodity.QCommodity.HighLow != null)
                                                {
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                                }

                                                //最高最低
                                                if (int.Parse(InformationSeq) > 1 && (HighPrice < IndexValue || HighPrice == 0.0))
                                                {
                                                    mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, LowPrice, InformationTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                                if (int.Parse(InformationSeq) > 1 && (LowPrice > IndexValue || LowPrice == 0.0))
                                                {
                                                    mPCommodity.SetHighLow(InformationTime, InformationSeq, HighPrice, IndexValue, InformationTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }                                                
                                            //}
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse03 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 4:
                                    #region //集中市場競價交易委託統計資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse04 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 5:
                                    #region //集中市場公告資訊
                                    try
                                    {
                                        string astr = "";

                                        //astr = int.Parse(bte[10].ToString("x")).ToString("00") + " ";
                                        //astr += "[集中市場]" + System.Text.UnicodeEncoding.Default.GetString(bte, 11, Packetlength - 14);
                                        
                                        //ErrorProcess(astr);
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse05 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 6:
                                    #region //集中市場競價交易即時行情資訊
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse06 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        //modify 20150610
                                        nPos = 29;

                                        MatchPrice = 0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;
                                        oldMatchTOTALQty = 0;
                                        OpenPrice = 0;
                                        BuyPriceBest1 = 0;
                                        BuyQtyBest1 = 0;
                                        BuyPriceBest2 = 0;
                                        BuyQtyBest2 = 0;
                                        BuyPriceBest3 = 0;
                                        BuyQtyBest3 = 0;
                                        BuyPriceBest4 = 0;
                                        BuyQtyBest4 = 0;
                                        BuyPriceBest5 = 0;
                                        BuyQtyBest5 = 0;
                                        SellPriceBest1 = 0;
                                        SellQtyBest1 = 0;
                                        SellPriceBest2 = 0;
                                        SellQtyBest2 = 0;
                                        SellPriceBest3 = 0;
                                        SellQtyBest3 = 0;
                                        SellPriceBest4 = 0;
                                        SellQtyBest4 = 0;
                                        SellPriceBest5 = 0;
                                        SellQtyBest5 = 0;
                                        IsDepthChange = false;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        //if (sCommodityCode == 0) { break; }

                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }

                                        //MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00");

                                        //if (int.Parse(MatchTime) < 80000) { break; }
                                        if (long.Parse(MatchTime) < 80000000000) { break; }

                                        //modify 20150610
                                        sDisPlayTag = (int)bte[22];
                                        sFallRiseTag = (int)(bte[23] & 3);

                                        #region//check seq start
                                        if (m_QuoteSetting.IsCheckLost && m_QuoteSetting.IsRegisterAll)
                                        {
                                            Match_seq = Convert.ToInt32(InformationSeq);

                                            if (Match_seq != 0 && Match_seq != 1)
                                            {
                                                if (Match_seq - Tse_Match_seq != 1 && Match_seq > Tse_Match_seq)
                                                {
                                                    Tse_PacketLost_Qty += Match_seq - Tse_Match_seq - 1;
                                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Lost Tse_Match]" + " Seq Time:" + MatchTime + " LostQty:" + Tse_PacketLost_Qty + " Last:" + Tse_Match_seq + " Current:" + Match_seq);
                                                }
                                            }
                                            else
                                                Tse_PacketLost_Qty = 0;

                                            if (Match_seq > Tse_Match_seq)
                                                Tse_Match_seq = Match_seq;
                                        }
                                        #endregion//check seq end
                                        
                                        nResult = sDisPlayTag >> 7;
                                        nStatusTag = (int)bte[24] >> 7;

                                        //modify 20150610
                                        if (nStatusTag == 0)
                                            MatchTOTALQty = int.Parse(int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));

                                        nkindflag = "";

                                        if (nResult == 1)
                                        {
                                            MatchPrice = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                            //modify 20150610
                                            if (nStatusTag == 0)
                                            {
                                                nkindflag = "L";
                                                MatchQuantity = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                            }
                                            nPos = nPos + 7;
                                        }
                                        else
                                        {
                                            MatchPrice = 0.0;
                                            MatchQuantity = 0;
                                        }

                                        bool IsHasBidAsk = false;

                                        //買進五擋
                                        nResult = (sDisPlayTag & 112) >> 4;

                                        if (nResult > 0)
                                        {
                                            nkindflag += "D";
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    BuyPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    BuyPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    BuyPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    BuyPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    BuyPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }
                                        //賣出五擋
                                        nResult = (sDisPlayTag & 14) >> 1;

                                        if (nResult > 0)
                                        {
                                            if (nkindflag.IndexOf("D") == -1) { nkindflag += "D"; }
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    SellPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    SellPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    SellPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    SellPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    SellPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }

                                        if (Math.Round(BuyPriceBest1, 5) != Math.Round(oldBuyPriceBest1, 5) || Math.Round(BuyPriceBest2, 5) != Math.Round(oldBuyPriceBest2, 5) || Math.Round(BuyPriceBest3, 5) != Math.Round(oldBuyPriceBest3, 5) || Math.Round(BuyPriceBest4, 5) != Math.Round(oldBuyPriceBest4, 5) || Math.Round(BuyPriceBest5, 5) != Math.Round(oldBuyPriceBest5, 5) ||
                                            BuyQtyBest1 != oldBuyQtyBest1 || BuyQtyBest2 != oldBuyQtyBest2 || BuyQtyBest3 != oldBuyQtyBest3 || BuyQtyBest4 != oldBuyQtyBest4 || BuyQtyBest5 != oldBuyQtyBest5 ||
                                            Math.Round(SellPriceBest1, 5) != Math.Round(oldSellPriceBest1, 5) || Math.Round(SellPriceBest2, 5) != Math.Round(oldSellPriceBest2, 5) || Math.Round(SellPriceBest3, 5) != Math.Round(oldSellPriceBest3, 5) || Math.Round(SellPriceBest4, 5) != Math.Round(oldSellPriceBest4, 5) || Math.Round(SellPriceBest5, 5) != Math.Round(oldSellPriceBest5, 5) ||
                                            SellQtyBest1 != oldSellQtyBest1 || SellQtyBest2 != oldSellQtyBest2 || SellQtyBest3 != oldSellQtyBest3 || SellQtyBest4 != oldSellQtyBest4 || SellQtyBest5 != oldSellQtyBest5
                                            )
                                        {
                                            IsDepthChange = true;
                                        }

                                        oldBuyPriceBest1 = BuyPriceBest1;
                                        oldBuyQtyBest1 = BuyQtyBest1;
                                        oldBuyPriceBest2 = BuyPriceBest2;
                                        oldBuyQtyBest2 = BuyQtyBest2;
                                        oldBuyPriceBest3 = BuyPriceBest3;
                                        oldBuyQtyBest3 = BuyQtyBest3;
                                        oldBuyPriceBest4 = BuyPriceBest4;
                                        oldBuyQtyBest4 = BuyQtyBest4;
                                        oldBuyPriceBest5 = BuyPriceBest5;
                                        oldBuyQtyBest5 = BuyQtyBest5;
                                        oldSellPriceBest1 = SellPriceBest1;
                                        oldSellQtyBest1 = SellQtyBest1;
                                        oldSellPriceBest2 = SellPriceBest2;
                                        oldSellQtyBest2 = SellQtyBest2;
                                        oldSellPriceBest3 = SellPriceBest3;
                                        oldSellQtyBest3 = SellQtyBest3;
                                        oldSellPriceBest4 = SellPriceBest4;
                                        oldSellQtyBest4 = SellQtyBest4;
                                        oldSellPriceBest5 = SellPriceBest5;
                                        oldSellQtyBest5 = SellQtyBest5;

                                        //if (mPCommodity == null){mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString());}
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }
                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse06 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        //if (mPCommodity.CommodityId == "2325") 
                                        //    mPCommodity = mPCommodity;
                                        
                                        #region 寫HTicks
                                        
                                        /*if (MatchTime.Length >= 6 && int.Parse(MatchTime.Substring(0, 6)) >= 90000)
                                        {
                                            HTicks HTicks = new HTicks();
                                            HTicks.TradeDate = DateTime.Now.ToString("yyyy/MM/dd");
                                            HTicks.CommodityId = mPCommodity.CommodityId;
                                            HTicks.InformationTime = MatchTime;
                                            HTicks.InformationSeq = InformationSeq;
                                            HTicks.MatchSeq = 1;
                                            HTicks.MatchTime = MatchTime;
                                            HTicks.MatchPrice = MatchPrice;
                                            HTicks.MatchTotalQty = MatchTOTALQty;
                                            HTicks.BuyPriceBest1 = BuyPriceBest1;
                                            HTicks.BuyQtyBest1 = BuyQtyBest1;
                                            HTicks.SellPriceBest1 = SellPriceBest1;
                                            HTicks.SellQtyBest1 = SellQtyBest1;

                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || int.Parse(mPCommodity.QCommodity.Match.MatchTime.Substring(0, 6)) < 90000 || MatchTOTALQty == 0)
                                                HTicks.MatchQty = MatchTOTALQty;
                                            else
                                                HTicks.MatchQty = MatchTOTALQty - mPCommodity.QCommodity.Match.MatchTotalQty;

                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HTicks); }
                                        }*/
                                        
                                        #endregion

                                        //if (int.Parse(MatchTime) > 132600)
                                        //    IsHasBidAsk = IsHasBidAsk;

                                        //if (BuyQtyBest1 != 0 || SellQtyBest1 != 0)
                                        if (IsDepthChange)
                                        {
                                            if (mPCommodity.QCommodity.Best5 == null || mPCommodity.QCommodity.Best5.InformationSeq == null || mPCommodity.QCommodity.Best5.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Best5.InformationSeq) < int.Parse(InformationSeq)))
                                            {
                                                mPCommodity.SetBest5(MatchTime, InformationSeq, BuyPriceBest1, BuyQtyBest1, BuyPriceBest2, BuyQtyBest2, BuyPriceBest3, BuyQtyBest3, BuyPriceBest4, BuyQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest1, SellQtyBest1, SellPriceBest2, SellQtyBest2, SellPriceBest3, SellQtyBest3, SellPriceBest4, SellQtyBest4, SellPriceBest5, SellQtyBest5);
                                                //Util.ExecSqlCmd("insert into pbest5ticks(CommodityId,InformationTime,InformationSeq,BuyPriceBest1,BuyQtyBest1,SellPriceBest1,SellQtyBest1) values('" + mPCommodity.CommodityId + "','" + MatchTime + "','" + InformationSeq + "'," + BuyPriceBest1 + "," + BuyQtyBest1 + "," + SellPriceBest1 + "," + SellQtyBest1 + ")", m_QuoteSetting.DBConnectString);

                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Best5);*/
                                                DoSendWrite(mPCommodity.QCommodity.Best5);
                                                /*mPCommodity.Send(Best5);
                                                if (m_QuoteSetting.IsWriteToDb) { WriteDBPool.Enqueue(Best5); }*/
                                            }
                                        }

                                        if (nkindflag != "")
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty, BuyPriceBest1, BuyQtyBest1, SellPriceBest1, SellQtyBest1, BuyPriceBest2, BuyQtyBest2, SellPriceBest2, SellQtyBest2, BuyPriceBest3, BuyQtyBest3, SellPriceBest3, SellQtyBest3, BuyPriceBest4, BuyQtyBest4, SellPriceBest4, SellQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest5, SellQtyBest5, nkindflag, InformationSeq, MatchTime, "1");

                                        if (MatchPrice != 0.0)
                                        {
                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || (long.Parse(mPCommodity.QCommodity.Match.MatchTime) <= long.Parse(MatchTime)))
                                            {
                                                if (mPCommodity.QCommodity.Match != null)
                                                    oldMatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                                if (mPCommodity.QCommodity.Match != null && MatchTOTALQty <= oldMatchTOTALQty)
                                                    break;

                                                if (MatchTOTALQty == 0)
                                                    break;

                                                mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchTOTALQty - oldMatchTOTALQty, MatchTOTALQty);
                                                mPCommodity.QCommodity.Match.FallRiseTag = sFallRiseTag;
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                /*mPCommodity.Send(Match);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                                if(mPCommodity.QCommodity.HighLow == null)
                                                {
                                                    mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, MatchPrice, MatchTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                }
                                                else
                                                {                                                
                                                    if (mPCommodity.QCommodity.HighLow.DayHighPrice < MatchPrice || (mPCommodity.QCommodity.HighLow.DayHighPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, mPCommodity.QCommodity.HighLow.DayLowPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    }
                                                    if (mPCommodity.QCommodity.HighLow.DayLowPrice > MatchPrice || (mPCommodity.QCommodity.HighLow.DayLowPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, mPCommodity.QCommodity.HighLow.DayHighPrice, MatchPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    }
                                                }                                                
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse06 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 7:
                                    #region //集中市場定價交易成交統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse07 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");

                                        if (InformationTime == "999999")
                                            break;

                                        mPCommodity = m_PCommodityList.Set("1000", "1000", m_CMarket.Market, CommodityKind.Index);

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None,"", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "",""); }

                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq != InformationSeq)
                                        {
                                            AccountSumTotal = double.Parse(int.Parse(bte[13].ToString("x")).ToString("00") + int.Parse(bte[14].ToString("x")).ToString("00") + int.Parse(bte[15].ToString("x")).ToString("00") + int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00"));                                            
                                            AccountQuantityTotal = int.Parse(int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));
                                            AccountOrderTotal = int.Parse(int.Parse(bte[29].ToString("x")).ToString("00") + int.Parse(bte[30].ToString("x")).ToString("00") + int.Parse(bte[31].ToString("x")).ToString("00") + int.Parse(bte[32].ToString("x")).ToString("00") + int.Parse(bte[33].ToString("x")).ToString("00"));

                                            //InformationSeq = "1" + InformationSeq.Substring(1);

                                            mPCommodity.SetMatch(mPCommodity.QCommodity.Match.InformationTime, mPCommodity.QCommodity.Match.InformationSeq, 3, InformationTime, mPCommodity.QCommodity.Match.MatchPrice, AccountQuantityTotal, AccountSumTotal, AccountSumTotal + mPCommodity.QCommodity.Match.MatchTotalAmt, AccountQuantityTotal + mPCommodity.QCommodity.Match.MatchTotalQty, AccountOrderTotal + mPCommodity.QCommodity.Match.MatchTotalCnt, 0, 0);                                            
                                            //DoSendWrite(mPCommodity.QCommodity.Match);
                                            
                                        }           
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse07 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 8:
                                    #region //集中市場定價交易委託統計資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse08 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 9:
                                    #region //集中市場定價交易個股成交資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse09 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        MatchPrice = 0.0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        //if (sCommodityCode == 0) { break; }
                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }

                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchPrice = double.Parse(int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00")) / 100;
                                        MatchQuantity = int.Parse(int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00"));

                                        //if (mPCommodity == null){mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString());}
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }
                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse09 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        if ((mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq != InformationSeq) && MatchQuantity != 0)
                                        {
                                            if (mPCommodity.QCommodity.Match != null)
                                                MatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                            mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchQuantity, MatchQuantity + MatchTOTALQty);
                                            /*if (m_QuoteSetting.IsCalculateGreeks)
                                                m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                            DoSendWrite(mPCommodity.QCommodity.Match);
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchQuantity + MatchTOTALQty, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, MatchTime, "1");

                                            if (mPCommodity.QCommodity.Close != null)
                                            {
                                                mPCommodity.SetClose(mPCommodity.QCommodity.Close.InformationTime, mPCommodity.QCommodity.Close.InformationSeq, mPCommodity.QCommodity.Close.DayHighPrice, mPCommodity.QCommodity.Close.DayLowPrice, mPCommodity.QCommodity.Close.OpenPrice, mPCommodity.QCommodity.Close.BuyPrice, mPCommodity.QCommodity.Close.SellPrice, mPCommodity.QCommodity.Close.ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, mPCommodity.QCommodity.Match.MatchTotalQty, 0.0, mPCommodity.QCommodity.Close.SettlementPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse09 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 10:
                                    #region //新編台灣指數資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse10 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        IndexCode = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim(); ;
                                        IndexValue = double.Parse(int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00")) / 100;

                                        //Console.WriteLine(IndexCode + "--" + IndexValue + "--TSE");
                                        
                                        mPCommodity = m_PCommodityList.Set(IndexCode, IndexCode, m_CMarket.Market, CommodityKind.Index);
                                        //mPCommodity.CMarket.SetCommodity(IndexCode, mPCommodity);
                                        CodeMap cm = m_CMarket.GetCodeMap(CommodityKind.Index,IndexCode);

                                        if (cm == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse10 ERROR " + "][No Commodity][" + IndexCode + "]");
                                            break;
                                        }

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None,"", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "",""); }
                                        
                                        if (InformationSeq == "00000000")
                                        {
                                            mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, cm.Code, cm.CodeNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), InformationTime, InformationSeq, IndexValue, 0.0, 0.0, 1, "","");
                                            DoSendWrite(mPCommodity.QCommodity.Base);
                                            /*mPCommodity.Send(Base);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/
                                            break;
                                        }
                                        if (InformationSeq == "00000002")
                                        {
                                            mPCommodity.SetOpen(InformationTime, IndexValue);
                                            DoSendWrite(mPCommodity.QCommodity.Open);
                                            /*mPCommodity.Send(Open);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/

                                            mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, IndexValue, InformationTime);
                                            DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            /*mPCommodity.Send(HighLow);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                        }
                                        if (InformationTime == "999999")
                                        {
                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            OpenPrice = 0.0;
                                            AccountSumTotal = 0;
                                            AccountQuantityTotal = 0;
                                            AccountOrderTotal = 0;

                                            if (mPCommodity.QCommodity.Open != null)
                                                OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;                                                    
                                            }
                                            if(mPCommodity.QCommodity.Close != null)
                                            {
                                                AccountSumTotal = mPCommodity.QCommodity.Close.MatchTotalAmt;
                                                AccountQuantityTotal = mPCommodity.QCommodity.Close.MatchTotalQty;
                                                AccountOrderTotal = mPCommodity.QCommodity.Close.MatchTotalCnt;
                                            }

                                            mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, IndexValue, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, IndexValue);
                                            DoSendWrite(mPCommodity.QCommodity.Close);
                                            /*mPCommodity.Send(Close);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            
                                        }
                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) < int.Parse(InformationSeq)))
                                        {
                                            mPCommodity.SetMatch(InformationTime, InformationSeq, InformationTime, IndexValue, 0, 0);
                                            /*if (m_QuoteSetting.IsCalculateGreeks)
                                                m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                            DoSendWrite(mPCommodity.QCommodity.Match);
                                            WriteTicksLog(mPCommodity, InformationTime, IndexValue, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "1");
                                            /*mPCommodity.Send(Match);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                            }

                                            //最高最低
                                            if (int.Parse(InformationSeq) > 1 && (HighPrice < IndexValue || HighPrice == 0.0))
                                            {
                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, LowPrice, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }
                                            if (int.Parse(InformationSeq) > 1 && (LowPrice > IndexValue || LowPrice == 0.0))
                                            {
                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, HighPrice, IndexValue, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }                                                
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse10 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion                                
                                case 12:
                                    #region //集中市場競價交易開(收)盤資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse12 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        StkCnt = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00"));

                                        for (int i = 0; i < StkCnt; i++)
                                        {
                                            //modify 20150610
                                            sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 11 + i * 28, 6).Trim();
                                            OpenPrice = double.Parse(int.Parse(bte[17 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[18 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[19 + i * 28].ToString("x")).ToString("00")) / 100;
                                            HighPrice = double.Parse(int.Parse(bte[20 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[21 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[22 + i * 28].ToString("x")).ToString("00")) / 100;
                                            LowPrice = double.Parse(int.Parse(bte[23 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[24 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[25 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchPrice = double.Parse(int.Parse(bte[26 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[27 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[28 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchTOTALQty = int.Parse(int.Parse(bte[29 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[30 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[31 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[32 + i * 28].ToString("x")).ToString("00"));
                                            ShowTime = int.Parse(bte[33 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[34 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[35 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[36 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[37 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[38 + i * 28].ToString("x")).ToString("00");
                                            ShowTime = ShowTime.Substring(0, 6);

                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); 

                                            if ((mPCommodity.QCommodity.Open == null || mPCommodity.QCommodity.Open.OpenPrice == 0.0) && OpenPrice != 0.0)
                                            {
                                                mPCommodity.SetOpen(ShowTime, OpenPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/
                                            }

                                            if (mPCommodity.QCommodity.HighLow == null)
                                            {
                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }
                                            else
                                            {
                                                if (mPCommodity.QCommodity.HighLow.DayHighPrice > HighPrice)
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                if (mPCommodity.QCommodity.HighLow.DayLowPrice < LowPrice)
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;

                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }

                                            //if (ShowTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (ShowTime == "999999")
                                            {
                                                BuyPriceBest1 = 0.0;
                                                SellPriceBest1 = 0.0;

                                                if(mPCommodity.QCommodity.Best5 != null)
                                                {
                                                    BuyPriceBest1 = mPCommodity.QCommodity.Best5.BuyPriceBest1;
                                                    SellPriceBest1 = mPCommodity.QCommodity.Best5.SellPriceBest1;
                                                }

                                                ClosePrice = MatchPrice;
                                                SettlePrice = MatchPrice;
                                                if (SettlePrice == 0.0) { SettlePrice = mPCommodity.QCommodity.Base.ReferencePrice; }

                                                mPCommodity.SetClose(ShowTime, InformationSeq, HighPrice, LowPrice, OpenPrice, BuyPriceBest1, SellPriceBest1, ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, MatchTOTALQty, 0.0, SettlePrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse12 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 13:
                                    #region //集中市場零股交易即時揭示資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse13 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 14:
                                    #region //集中市場認購(售)權證全稱資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse14 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 15:
                                    #region //集中市場當日停止交易股票資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse15 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 16:
                                    #region //集中市場行情傳輸系統HeartBeat資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse16 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 17:
                                    #region //第二IP集中市場競價交易即時行情資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse17 ERROR CHECKSUM ERROR]");
                                            break;
                                        }
                                        //modify 20150610
                                        nPos = 29;

                                        MatchPrice = 0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;
                                        OpenPrice = 0;
                                        BuyPriceBest1 = 0;
                                        BuyQtyBest1 = 0;
                                        BuyPriceBest2 = 0;
                                        BuyQtyBest2 = 0;
                                        BuyPriceBest3 = 0;
                                        BuyQtyBest3 = 0;
                                        BuyPriceBest4 = 0;
                                        BuyQtyBest4 = 0;
                                        BuyPriceBest5 = 0;
                                        BuyQtyBest5 = 0;
                                        SellPriceBest1 = 0;
                                        SellQtyBest1 = 0;
                                        SellPriceBest2 = 0;
                                        SellQtyBest2 = 0;
                                        SellPriceBest3 = 0;
                                        SellQtyBest3 = 0;
                                        SellPriceBest4 = 0;
                                        SellQtyBest4 = 0;
                                        SellPriceBest5 = 0;
                                        SellQtyBest5 = 0;
                                        IsDepthChange = false;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }
                                        
                                        /*if (sCommodityId != "05070P")
                                        {
                                            continue;

                                        }*/

                                        //MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00");
                                                                                
                                        //if (int.Parse(MatchTime) < 80000) { break; }
                                        if (long.Parse(MatchTime) < 80000000000) { break; }

                                        //modify 20150610
                                        sDisPlayTag = (int)bte[22];                                        
                                        sFallRiseTag = (int)(bte[23] & 3);
                                                                                
                                        #region//check seq start
                                        if (m_QuoteSetting.IsCheckLost && m_QuoteSetting.IsRegisterAll)
                                        {
                                            Match_seq = Convert.ToInt32(InformationSeq);

                                            if (Match_seq != 0 && Match_seq != 1)
                                            {
                                                if (Match_seq - Tse_Match_seq != 1 && Match_seq > Tse_Match_seq)
                                                {
                                                    Tse_PacketLost_Qty += Match_seq - Tse_Match_seq - 1;
                                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse2_Error][Lost Tse_Match]" + " Seq Time:" + MatchTime + " LostQty:" + Tse_PacketLost_Qty + " Last:" + Tse_Match_seq + " Current:" + Match_seq);
                                                }
                                            }
                                            else
                                                Tse_PacketLost_Qty = 0;

                                            if (Match_seq > Tse_Match_seq)
                                                Tse_Match_seq = Match_seq;
                                        }
                                        #endregion//check seq end

                                        nResult = sDisPlayTag >> 7;
                                        nStatusTag = (int)bte[24] >> 7;

                                        //modify 20150610
                                        if (nStatusTag == 0)
                                            MatchTOTALQty = int.Parse(int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));

                                        nkindflag = "";

                                        if (nResult == 1)
                                        {
                                            MatchPrice = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                            //modify 20150610
                                            if (nStatusTag == 0)
                                            {
                                                nkindflag = "L";
                                                MatchQuantity = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                            }
                                            nPos = nPos + 7;
                                        }
                                        else
                                        {
                                            MatchPrice = 0.0;
                                            MatchQuantity = 0;
                                        }

                                        bool IsHasBidAsk = false;

                                        //買進五擋
                                        nResult = (sDisPlayTag & 112) >> 4;

                                        if (nResult > 0) 
                                        {
                                            nkindflag += "D";
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    BuyPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    BuyPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    BuyPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    BuyPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    BuyPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }

                                        /*if (sCommodityId == "05070P")
                                        {
                                            Console.WriteLine(MatchTime + " -- " + BuyPriceBest1 + " -- " + BuyQtyBest1 + " -- " + IsHasBidAsk);

                                        }*/

                                        //賣出五擋
                                        nResult = (sDisPlayTag & 14) >> 1;

                                        if (nResult > 0)
                                        {
                                            if (nkindflag.IndexOf("D") == -1) { nkindflag += "D"; }
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    SellPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    SellPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    SellPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    SellPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    SellPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }

                                        if (Math.Round(BuyPriceBest1, 5) != Math.Round(oldBuyPriceBest1, 5) || Math.Round(BuyPriceBest2, 5) != Math.Round(oldBuyPriceBest2, 5) || Math.Round(BuyPriceBest3, 5) != Math.Round(oldBuyPriceBest3, 5) || Math.Round(BuyPriceBest4, 5) != Math.Round(oldBuyPriceBest4, 5) || Math.Round(BuyPriceBest5, 5) != Math.Round(oldBuyPriceBest5, 5) ||
                                            BuyQtyBest1 != oldBuyQtyBest1 || BuyQtyBest2 != oldBuyQtyBest2 || BuyQtyBest3 != oldBuyQtyBest3 || BuyQtyBest4 != oldBuyQtyBest4 || BuyQtyBest5 != oldBuyQtyBest5 ||
                                            Math.Round(SellPriceBest1, 5) != Math.Round(oldSellPriceBest1, 5) || Math.Round(SellPriceBest2, 5) != Math.Round(oldSellPriceBest2, 5) || Math.Round(SellPriceBest3, 5) != Math.Round(oldSellPriceBest3, 5) || Math.Round(SellPriceBest4, 5) != Math.Round(oldSellPriceBest4, 5) || Math.Round(SellPriceBest5, 5) != Math.Round(oldSellPriceBest5, 5) ||
                                            SellQtyBest1 != oldSellQtyBest1 || SellQtyBest2 != oldSellQtyBest2 || SellQtyBest3 != oldSellQtyBest3 || SellQtyBest4 != oldSellQtyBest4 || SellQtyBest5 != oldSellQtyBest5
                                            )
                                        {
                                            IsDepthChange = true;
                                        }

                                        oldBuyPriceBest1 = BuyPriceBest1;
                                        oldBuyQtyBest1 = BuyQtyBest1;
                                        oldBuyPriceBest2 = BuyPriceBest2;
                                        oldBuyQtyBest2 = BuyQtyBest2;
                                        oldBuyPriceBest3 = BuyPriceBest3;
                                        oldBuyQtyBest3 = BuyQtyBest3;
                                        oldBuyPriceBest4 = BuyPriceBest4;
                                        oldBuyQtyBest4 = BuyQtyBest4;
                                        oldBuyPriceBest5 = BuyPriceBest5;
                                        oldBuyQtyBest5 = BuyQtyBest5;
                                        oldSellPriceBest1 = SellPriceBest1;
                                        oldSellQtyBest1 = SellQtyBest1;
                                        oldSellPriceBest2 = SellPriceBest2;
                                        oldSellQtyBest2 = SellQtyBest2;
                                        oldSellPriceBest3 = SellPriceBest3;
                                        oldSellQtyBest3 = SellQtyBest3;
                                        oldSellPriceBest4 = SellPriceBest4;
                                        oldSellQtyBest4 = SellQtyBest4;
                                        oldSellPriceBest5 = SellPriceBest5;
                                        oldSellQtyBest5 = SellQtyBest5;
                                        /*if (sCommodityId == "05070P")
                                        {
                                            Console.WriteLine(MatchTime + " -- " + SellPriceBest1 + " -- " + SellQtyBest1 + " -- " + IsHasBidAsk);

                                        }*/

                                        //continue;

                                        //if (mPCommodity == null) { mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString()); }
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }

                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse17 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        //if (!(mPCommodity.CommodityId == "032701" || mPCommodity.CommodityId == "2823")) { continue; }

                                        #region 寫HTicks

                                        /*if (MatchTime.Length >= 6 && int.Parse(MatchTime.Substring(0, 6)) >= 90000)
                                        {
                                            HTicks HTicks = new HTicks();
                                            HTicks.TradeDate = DateTime.Now.ToString("yyyy/MM/dd");
                                            HTicks.CommodityId = mPCommodity.CommodityId;
                                            HTicks.InformationTime = MatchTime;
                                            HTicks.InformationSeq = InformationSeq;
                                            HTicks.MatchSeq = 1;
                                            HTicks.MatchTime = MatchTime;
                                            HTicks.MatchPrice = MatchPrice;
                                            HTicks.MatchTotalQty = MatchTOTALQty;
                                            HTicks.BuyPriceBest1 = BuyPriceBest1;
                                            HTicks.BuyQtyBest1 = BuyQtyBest1;
                                            HTicks.SellPriceBest1 = SellPriceBest1;
                                            HTicks.SellQtyBest1 = SellQtyBest1;

                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || int.Parse(mPCommodity.QCommodity.Match.MatchTime.Substring(0, 6)) < 90000 || MatchTOTALQty == 0)
                                                HTicks.MatchQty = MatchTOTALQty;
                                            else
                                                HTicks.MatchQty = MatchTOTALQty - mPCommodity.QCommodity.Match.MatchTotalQty;

                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HTicks); }
                                        }*/

                                        #endregion

                                        //if (BuyQtyBest1 != 0 || SellQtyBest1 != 0)
                                        if (IsDepthChange)
                                        {   

                                            if (mPCommodity.QCommodity.Best5 == null || mPCommodity.QCommodity.Best5.InformationSeq == null || mPCommodity.QCommodity.Best5.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Best5.InformationSeq) < int.Parse(InformationSeq)))
                                            {
                                                mPCommodity.SetBest5(MatchTime, InformationSeq, BuyPriceBest1, BuyQtyBest1, BuyPriceBest2, BuyQtyBest2, BuyPriceBest3, BuyQtyBest3, BuyPriceBest4, BuyQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest1, SellQtyBest1, SellPriceBest2, SellQtyBest2, SellPriceBest3, SellQtyBest3, SellPriceBest4, SellQtyBest4, SellPriceBest5, SellQtyBest5);
                                                //Util.ExecSqlCmd("insert into pbest5ticks(CommodityId,InformationTime,InformationSeq,BuyPriceBest1,BuyQtyBest1,SellPriceBest1,SellQtyBest1) values('" + mPCommodity.CommodityId + "','" + MatchTime + "','" + InformationSeq + "'," + BuyPriceBest1 + "," + BuyQtyBest1 + "," + SellPriceBest1 + "," + SellQtyBest1 + ")", m_QuoteSetting.DBConnectString);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Best5);*/
                                                DoSendWrite(mPCommodity.QCommodity.Best5);
                                                /*mPCommodity.Send(Best5);
                                                if (m_QuoteSetting.IsWriteToDb) { WriteDBPool.Enqueue(Best5); }*/
                                            }
                                        }

                                        if (nkindflag != "")
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty, BuyPriceBest1, BuyQtyBest1, SellPriceBest1, SellQtyBest1, BuyPriceBest2, BuyQtyBest2, SellPriceBest2, SellQtyBest2, BuyPriceBest3, BuyQtyBest3, SellPriceBest3, SellQtyBest3, BuyPriceBest4, BuyQtyBest4, SellPriceBest4, SellQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest5, SellQtyBest5, nkindflag, InformationSeq, MatchTime, "1");

                                        if (MatchPrice != 0.0)
                                        {
                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || (long.Parse(mPCommodity.QCommodity.Match.MatchTime) <= long.Parse(MatchTime)))
                                            {
                                                if (mPCommodity.QCommodity.Match != null)
                                                    oldMatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                                if (mPCommodity.QCommodity.Match != null && MatchTOTALQty <= oldMatchTOTALQty)
                                                    break;

                                                if (MatchTOTALQty == 0)
                                                    break;

                                                mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchTOTALQty - oldMatchTOTALQty, MatchTOTALQty);
                                                
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                /*mPCommodity.Send(Match);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                                if(mPCommodity.QCommodity.HighLow == null)
                                                {
                                                    mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, MatchPrice, MatchTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                                else
                                                {                                                
                                                    if (mPCommodity.QCommodity.HighLow.DayHighPrice < MatchPrice || (mPCommodity.QCommodity.HighLow.DayHighPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, mPCommodity.QCommodity.HighLow.DayLowPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                    if (mPCommodity.QCommodity.HighLow.DayLowPrice > MatchPrice || (mPCommodity.QCommodity.HighLow.DayLowPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, mPCommodity.QCommodity.HighLow.DayHighPrice, MatchPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                }
                                                
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse17 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 18:
                                    #region //第二IP集中市場競價交易開(收)盤資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse18 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        StkCnt = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00"));

                                        for (int i = 0; i < StkCnt; i++)
                                        {
                                            //modify 20150610
                                            sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 11 + i * 28, 6).Trim();
                                            OpenPrice = double.Parse(int.Parse(bte[17 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[18 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[19 + i * 28].ToString("x")).ToString("00")) / 100;
                                            HighPrice = double.Parse(int.Parse(bte[20 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[21 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[22 + i * 28].ToString("x")).ToString("00")) / 100;
                                            LowPrice = double.Parse(int.Parse(bte[23 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[24 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[25 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchPrice = double.Parse(int.Parse(bte[26 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[27 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[28 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchTOTALQty = int.Parse(int.Parse(bte[29 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[30 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[31 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[32 + i * 28].ToString("x")).ToString("00"));
                                            ShowTime = int.Parse(bte[33 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[34 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[35 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[36 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[37 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[38 + i * 28].ToString("x")).ToString("00");
                                            ShowTime = ShowTime.Substring(0, 6);

                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None);
                                            
                                            if (mPCommodity.QCommodity.Open == null && OpenPrice != 0.0)
                                            {
                                                mPCommodity.SetOpen(ShowTime, OpenPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/
                                            }

                                            if (mPCommodity.QCommodity.HighLow == null)
                                            {
                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }
                                            else
                                            {
                                                if (mPCommodity.QCommodity.HighLow.DayHighPrice > HighPrice)
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                if (mPCommodity.QCommodity.HighLow.DayLowPrice < LowPrice)
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;

                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }

                                            //if (ShowTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (ShowTime == "999999")
                                            {
                                                BuyPriceBest1 = 0.0;
                                                SellPriceBest1 = 0.0;

                                                if(mPCommodity.QCommodity.Best5 != null)
                                                {
                                                    BuyPriceBest1 = mPCommodity.QCommodity.Best5.BuyPriceBest1;
                                                    SellPriceBest1 = mPCommodity.QCommodity.Best5.SellPriceBest1;
                                                }

                                                ClosePrice = MatchPrice;
                                                SettlePrice = MatchPrice;
                                                if (SettlePrice == 0.0) { SettlePrice = mPCommodity.QCommodity.Base.ReferencePrice; }

                                                mPCommodity.SetClose(ShowTime, InformationSeq, HighPrice, LowPrice, OpenPrice, BuyPriceBest1, SellPriceBest1, ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, MatchTOTALQty, 0.0, SettlePrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse18 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 19:
                                    #region //集中市場當日暫停/恢復交易股票資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][Tse90 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        string iStartTime  = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        string iStopTime = int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00");
                                        string iFlag = System.Text.UnicodeEncoding.Default.GetString(bte, 22, 1).Trim();

                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "]CommodityId=" + sCommodityId + ",StartTime=" + iStartTime + ",StopTime=" + iStopTime + ",Flag=" + iFlag);
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse19 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                default:
                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][tCode=" + tCode + "] " + "Tse TRANSMISSION_CODE ERROR");
                                    break;                               
                            }
                            #endregion

                        }
                        catch (Exception ex)
                        {
                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse__Error] " + "[" + ex.Message + "][" + ex.StackTrace + "]");
                        }
                    }

                    Thread.Sleep(1);
                }
            }
            catch (ThreadAbortException ex2)
            {
            }
            catch (Exception ex)
            {
                ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error] " + "[" + ex.Message + "][" + ex.StackTrace + "]");
            }               
        }
        private void DealWithOtc()
        {
            string InformationSeq;
            string InformationTime;
            int Packetlength = 0;
            int StkCnt = 0;

            string sCommodityId;
            string sCommodityNm;
            string stkProperty;
            string stkState;
            //int sCommodityCode = 0;
            int sUnusualCode = 0;
            double sRiseLimitPrice = 0.0;
            double sReferencePrice = 0.0;
            double sFallLimitPrice = 0.0;

            int sDisPlayTag = 0;
            int sFallRiseTag = 0;
            int nResult = 0;
            int nStatusTag = 0;
            int nPos = 21;

            string MatchTime;
            double MatchPrice = 0.0;
            int MatchQuantity = 0;
            int MatchTOTALQty = 0;
            int oldMatchTOTALQty = 0;

            double HighPrice = 0.0;
            double LowPrice = 0.0;
            double OpenPrice = 0.0;
            double ClosePrice = 0.0;
            double SettlePrice = 0.0;
            string ShowTime;

            double AccountSum = 0;
            int AccountQuantity = 0;
            int AccountOrder = 0;
            double AccountSumTotal = 0;
            int AccountQuantityTotal = 0;
            int AccountOrderTotal = 0;

            int BuyOrder = 0;
            int BuyQuantity = 0;
            int SellOrder = 0;
            int SellQuantity = 0;

            string BultinKey;
            string BultinData;

            string IndexCode = "";
            int IndexItems = 0;
            double IndexValue = 0.0;

            double BuyPriceBest1 = 0.0;
            int BuyQtyBest1 = 0;
            double BuyPriceBest2 = 0.0;
            int BuyQtyBest2 = 0;
            double BuyPriceBest3 = 0.0;
            int BuyQtyBest3 = 0;
            double BuyPriceBest4 = 0.0;
            int BuyQtyBest4 = 0;
            double BuyPriceBest5 = 0.0;
            int BuyQtyBest5 = 0;
            double SellPriceBest1 = 0.0;
            int SellQtyBest1 = 0;
            double SellPriceBest2 = 0.0;
            int SellQtyBest2 = 0;
            double SellPriceBest3 = 0.0;
            int SellQtyBest3 = 0;
            double SellPriceBest4 = 0.0;
            int SellQtyBest4 = 0;
            double SellPriceBest5 = 0.0;
            int SellQtyBest5 = 0;

            double oldBuyPriceBest1 = 0.0;
            int oldBuyQtyBest1 = 0;
            double oldBuyPriceBest2 = 0.0;
            int oldBuyQtyBest2 = 0;
            double oldBuyPriceBest3 = 0.0;
            int oldBuyQtyBest3 = 0;
            double oldBuyPriceBest4 = 0.0;
            int oldBuyQtyBest4 = 0;
            double oldBuyPriceBest5 = 0.0;
            int oldBuyQtyBest5 = 0;
            double oldSellPriceBest1 = 0.0;
            int oldSellQtyBest1 = 0;
            double oldSellPriceBest2 = 0.0;
            int oldSellQtyBest2 = 0;
            double oldSellPriceBest3 = 0.0;
            int oldSellQtyBest3 = 0;
            double oldSellPriceBest4 = 0.0;
            int oldSellQtyBest4 = 0;
            double oldSellPriceBest5 = 0.0;
            int oldSellQtyBest5 = 0;

            bool IsDepthChange = false;

            int sLeftQty = 0;
            double sStrikePrice = 0.0;
            double sExecRatio = 0.0;
            double sBarrier = 0.0;
            string sMaturity = "";

            int Unit = 0;
            int Match_seq;
            int Otc_Match_seq = 0;
            int Otc_PacketLost_Qty = 0;

            string CurrencyId = "";
            string nkindflag = "";

            byte[] sCheckSum;
            byte[] bte;

            PCommodity mPCommodity = null;

            try
            {
                while (true)
                {
                    if (!InitialOK) { continue; }

                    while (m_PackagePool.Count > 0)
                    {
                        try
                        {
                            mPCommodity = null;

                            bte = (byte[])m_PackagePool.Dequeue();

                            if (!CMarket.IsTrade)
                                continue;

                            Packetlength = int.Parse(int.Parse(bte[1].ToString("x")).ToString("00") + int.Parse(bte[2].ToString("x")).ToString("00"));
                            InformationSeq = int.Parse(bte[6].ToString("x")).ToString("00") + int.Parse(bte[7].ToString("x")).ToString("00") + int.Parse(bte[8].ToString("x")).ToString("00") + int.Parse(bte[9].ToString("x")).ToString("00");
                            sCheckSum = new byte[Packetlength - 3];

                            int tCode = int.Parse(bte[4].ToString("x"));

                            if (!m_QuoteSetting.IsRegisterAll)
                            {
                                string gCommodityId = "";
                                //int gCommodityCode = 0;

                                /*if (tCode == 1)
                                {
                                    gCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                    mPCommodity = m_PCommodityList.Get(gCommodityId);

                                    if (mPCommodity == null)
                                        continue;
                                }
                                else if (tCode == 6 || tCode == 9)
                                {
                                    gCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                    mPCommodity = m_CMarket.GetInnerCode(gCommodityCode.ToString());

                                    if (mPCommodity == null)
                                        continue;
                                }*/
                                if (tCode == 1 || tCode == 6 || tCode == 9)
                                {
                                    gCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                    mPCommodity = m_PCommodityList.Get(gCommodityId);

                                    if (mPCommodity == null)
                                        continue;
                                }                                
                            }

                            m_PacketNum++;

                            #region //TRANSMISSION_CODE
                            switch (tCode)
                            {
                                case 1:
                                    #region //上櫃個股基本資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc01 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();

                                        if (sCommodityId == "000000") { break; }
                                        
                                        //2015/10/19 新格式
                                        sCommodityNm = System.Text.UnicodeEncoding.Default.GetString(bte, 16, 16).Trim();
                                        stkProperty = System.Text.UnicodeEncoding.Default.GetString(bte, 32, 2).Trim();
                                        stkState = System.Text.UnicodeEncoding.Default.GetString(bte, 34, 2).Trim();
                                        sUnusualCode = int.Parse(bte[38].ToString("x"));
                                        sReferencePrice = double.Parse(int.Parse(bte[40].ToString("x")).ToString("00") + int.Parse(bte[41].ToString("x")).ToString("00") + int.Parse(bte[42].ToString("x")).ToString("00")) / 100;
                                        sRiseLimitPrice = double.Parse(int.Parse(bte[43].ToString("x")).ToString("00") + int.Parse(bte[44].ToString("x")).ToString("00") + int.Parse(bte[45].ToString("x")).ToString("00")) / 100;
                                        sFallLimitPrice = double.Parse(int.Parse(bte[46].ToString("x")).ToString("00") + int.Parse(bte[47].ToString("x")).ToString("00") + int.Parse(bte[48].ToString("x")).ToString("00")) / 100;

                                        string IsWarrantFlag = System.Text.UnicodeEncoding.Default.GetString(bte, 58, 1).Trim();
                                        sStrikePrice = double.Parse(int.Parse(bte[59].ToString("x")).ToString("00") + int.Parse(bte[60].ToString("x")).ToString("00") + int.Parse(bte[61].ToString("x")).ToString("00") + int.Parse(bte[62].ToString("x")).ToString("00")) / 100;
                                        sLeftQty = int.Parse(int.Parse(bte[73].ToString("x")).ToString("00") + int.Parse(bte[74].ToString("x")).ToString("00") + int.Parse(bte[75].ToString("x")).ToString("00") + int.Parse(bte[76].ToString("x")).ToString("00") + int.Parse(bte[77].ToString("x")).ToString("00"));
                                        sExecRatio = double.Parse(int.Parse(bte[78].ToString("x")).ToString("00") + int.Parse(bte[79].ToString("x")).ToString("00") + int.Parse(bte[80].ToString("x")).ToString("00") + int.Parse(bte[81].ToString("x")).ToString("00")) / 100 / 1000;
                                        sBarrier = double.Parse(int.Parse(bte[82].ToString("x")).ToString("00") + int.Parse(bte[83].ToString("x")).ToString("00") + int.Parse(bte[84].ToString("x")).ToString("00") + int.Parse(bte[85].ToString("x")).ToString("00")) / 100;
                                        if (sBarrier == 0.0) { sBarrier = double.Parse(int.Parse(bte[86].ToString("x")).ToString("00") + int.Parse(bte[87].ToString("x")).ToString("00") + int.Parse(bte[88].ToString("x")).ToString("00") + int.Parse(bte[89].ToString("x")).ToString("00")) / 100; }
                                        double intmaturity = double.Parse(int.Parse(bte[90].ToString("x")).ToString("00") + int.Parse(bte[91].ToString("x")).ToString("00") + int.Parse(bte[92].ToString("x")).ToString("00") + int.Parse(bte[93].ToString("x")).ToString("00"));
                                        sMaturity = "";
                                        if (intmaturity > 0) { sMaturity = intmaturity.ToString().Substring(0, 4) + "/" + intmaturity.ToString().Substring(4, 2) + "/" + intmaturity.ToString().Substring(6, 2); }
                                        Unit = int.Parse(int.Parse(bte[94].ToString("x")).ToString("00") + int.Parse(bte[95].ToString("x")).ToString("00") + int.Parse(bte[96].ToString("x")).ToString("00"));
                                        CurrencyId = System.Text.UnicodeEncoding.Default.GetString(bte, 97, 3).Trim();

                                        if (TSECurrencyMap.ContainsKey(CurrencyId)) { CurrencyId = TSECurrencyMap[CurrencyId].ToString(); }

                                        if (CurrencyId == "") { CurrencyId = "NTD"; }

                                        if (m_QuoteSetting.IsWriteToDb)
                                            Util.ExecSqlCmd("EXEC spUpdateCurrency '" + sCommodityId + "','" + CurrencyId + "'", m_QuoteSetting.DBConnectString);

                                        //mPCommodity.CMarket.SetCommodity(sCommodityCode, mPCommodity);

                                        //if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone) || mPCommodity.QCommodity.Base.InformationSeq == null || mPCommodity.QCommodity.Base.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Base.InformationSeq) <= int.Parse(InformationSeq)))
                                        //{
                                            CommodityKind sCommodityKind = CommodityKind.Stock;
                                            CommodityType sCommodityType = CommodityType.None;

                                            GetCommodityKind(sCommodityId, ref sCommodityKind, ref sCommodityType);
                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, sCommodityKind);
                                            mPCommodity.IsLocalCommodity = true;    
                                            mPCommodity.SetBase(m_CMarket.Market, sCommodityKind, sCommodityType, "", sCommodityNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", InformationSeq, sReferencePrice, sRiseLimitPrice, sFallLimitPrice, Unit, "", stkProperty);
                                            DoSendWrite(mPCommodity.QCommodity.Base);

                                            if (IsWarrantFlag == "Y")
                                            {
                                                mPCommodity.SetExtra(sCommodityId, sStrikePrice, sExecRatio);
                                                if (m_QuoteSetting.IsWriteToDb)
                                                    Util.ExecSqlCmd("EXEC spWarrantExtra2 '" + sCommodityId + "'," + sStrikePrice + "," + sExecRatio + "," + sLeftQty + "," + sBarrier + ",'" + sMaturity + "'", m_QuoteSetting.DBConnectString);
                                                    //Util.ExecSqlCmd("EXEC spWarrantExtra '" + sCommodityId + "'," + sStrikePrice + "," + sExecRatio + "," + sLeftQty, m_QuoteSetting.DBConnectString);                                                
                                            }        
                                            
                                            /*mPCommodity.Send(Base);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/
                                        //}
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc01 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 2:
                                    #region //上櫃等價交易成交統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc02 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");

                                        mPCommodity = m_PCommodityList.Set("4000", "4000", m_CMarket.Market, CommodityKind.Index);

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None,"", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today,m_CMarket.TimeZone), "", "", 0, 0, 0, 1, "",""); }

                                        if (InformationSeq == "00000000") { break; }

                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) <= int.Parse(InformationSeq)))
                                        {
                                            AccountSumTotal = double.Parse(int.Parse(bte[13].ToString("x")).ToString("00") + int.Parse(bte[14].ToString("x")).ToString("00") + int.Parse(bte[15].ToString("x")).ToString("00") + int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00"));
                                            AccountQuantityTotal = int.Parse(int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));
                                            AccountOrderTotal = int.Parse(int.Parse(bte[29].ToString("x")).ToString("00") + int.Parse(bte[30].ToString("x")).ToString("00") + int.Parse(bte[31].ToString("x")).ToString("00") + int.Parse(bte[32].ToString("x")).ToString("00") + int.Parse(bte[33].ToString("x")).ToString("00"));

                                            if (mPCommodity.QCommodity.Match != null)
                                            {
                                                AccountSum = AccountSumTotal - mPCommodity.QCommodity.Match.MatchTotalAmt;
                                                AccountQuantity = (int)(AccountQuantityTotal - mPCommodity.QCommodity.Match.MatchTotalQty);
                                                AccountOrder = (int)(AccountOrderTotal - mPCommodity.QCommodity.Match.MatchTotalCnt);
                                                MatchPrice = mPCommodity.QCommodity.Match.MatchPrice;
                                            }
                                            else
                                            {
                                                AccountSum = AccountSumTotal;
                                                AccountQuantity = AccountQuantityTotal;
                                                AccountOrder = AccountOrderTotal;
                                                MatchPrice = 0.0;
                                            }

                                            if (!(AccountSum == 0.0 && AccountQuantity == 0 && AccountOrder == 0))
                                            {
                                                mPCommodity.SetMatch(InformationTime, InformationSeq, 2, InformationTime, MatchPrice, AccountQuantity, AccountSum, AccountSumTotal, AccountQuantityTotal, AccountOrderTotal, 0, 0);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                if (InformationTime != "999999")
                                                {
                                                    DoSendWrite(mPCommodity.QCommodity.Match);
                                                    WriteTicksLog(mPCommodity, InformationTime, MatchPrice, AccountSum, AccountSumTotal, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "2");
                                                }
                                                else
                                                    mPCommodity.QCommodity.Match.MatchSeq = 1;
                                            }
                                            /*mPCommodity.Send(Match);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/
                                        }

                                        //if (InformationTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.MatchTotalAmt == 0.0))
                                        if (InformationTime == "999999")
                                        {
                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            OpenPrice = 0.0;
                                            ClosePrice = 0.0;

                                            if (mPCommodity.QCommodity.Open != null)
                                                OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                            }
                                            if (mPCommodity.QCommodity.Close != null)
                                                ClosePrice = mPCommodity.QCommodity.Close.ClosePrice;

                                            mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, ClosePrice);
                                            DoSendWrite(mPCommodity.QCommodity.Close);
                                            /*mPCommodity.Send(Close);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc02 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 3:
                                    #region //上櫃等價交易指數統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc03 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");
                                        IndexItems = int.Parse(int.Parse(bte[13].ToString("x")).ToString("00"));

                                        for (int k = 0; k < IndexItems; k++)
                                        {
                                            switch (k)
                                            {
                                                case 0:
                                                    IndexCode = "4000";//上　櫃
                                                    break;
                                                case 1:
                                                    IndexCode = "4001";//電子類
                                                    break;
                                                case 2:
                                                    IndexCode = "4002";//食品類
                                                    break;
                                                case 3:
                                                    IndexCode = "4003";//塑膠類
                                                    break;
                                                case 4:
                                                    IndexCode = "4004";//紡纖類
                                                    break;
                                                case 5:
                                                    IndexCode = "4005";//電機類
                                                    break;
                                                case 6:
                                                    IndexCode = "4006";//電器類
                                                    break;
                                                case 7:
                                                    IndexCode = "4007";//玻璃類
                                                    break;
                                                case 8:
                                                    IndexCode = "4008";//鋼鐵類
                                                    break;
                                                case 9:
                                                    IndexCode = "4009";//橡膠類
                                                    break;
                                                case 10:
                                                    IndexCode = "4010";//營建類
                                                    break;
                                                case 11:
                                                    IndexCode = "4011";//航運類
                                                    break;
                                                case 12:
                                                    IndexCode = "4012";//觀光類
                                                    break;
                                                case 13:
                                                    IndexCode = "4013";//金融類
                                                    break;
                                                case 14:
                                                    IndexCode = "4014";//百貨類
                                                    break;
                                                case 15:
                                                    IndexCode = "4015";//化工類
                                                    break;
                                                case 16:
                                                    IndexCode = "4016";//生技醫療類
                                                    break;
                                                case 17:
                                                    IndexCode = "4017";//油電燃氣類
                                                    break;
                                                case 18:
                                                    IndexCode = "4018";//半導體類
                                                    break;
                                                case 19:
                                                    IndexCode = "4019";//電腦週邊設備類
                                                    break;
                                                case 20:
                                                    IndexCode = "4020";//光電類
                                                    break;
                                                case 21:
                                                    IndexCode = "4021";//通信網路類
                                                    break;
                                                case 22:
                                                    IndexCode = "4022";//電子零組件類
                                                    break;
                                                case 23:
                                                    IndexCode = "4023";//電子通路類
                                                    break;
                                                case 24:
                                                    IndexCode = "4024";//資訊服務類
                                                    break;
                                                default:
                                                    break;
                                            }

                                            IndexValue = double.Parse(int.Parse(bte[14 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[15 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[16 + 4 * k].ToString("x")).ToString("00") + int.Parse(bte[17 + 4 * k].ToString("x")).ToString("00")) / 100;

                                            mPCommodity = m_PCommodityList.Set(IndexCode, IndexCode, m_CMarket.Market, CommodityKind.Index);
                                            mPCommodity.IsLocalCommodity = true;
                                            //mPCommodity.CMarket.SetCommodity(IndexCode, mPCommodity);
                                            CodeMap cm = m_CMarket.GetCodeMap(CommodityKind.Index,IndexCode);

                                            if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, "", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", "", 0, 0, 0, 1, "", ""); }

                                            if (InformationSeq == "00000000")
                                            {
                                                mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, cm.Code, cm.CodeNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), InformationTime, InformationSeq, IndexValue, 0, 0, 1, "", "");
                                                DoSendWrite(mPCommodity.QCommodity.Base);
                                                /*mPCommodity.Send(Base);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/
                                                continue;
                                            }
                                            if (InformationSeq == "00000002")
                                            {
                                                mPCommodity.SetOpen(InformationTime, IndexValue);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/
                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, IndexValue, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }
                                            //if (InformationTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (InformationTime == "999999")
                                            {
                                                HighPrice = 0.0;
                                                LowPrice = 0.0;
                                                OpenPrice = 0.0;
                                                AccountSumTotal = 0;
                                                AccountQuantityTotal = 0;
                                                AccountOrderTotal = 0;

                                                if (mPCommodity.QCommodity.Open != null)
                                                    OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                                if (mPCommodity.QCommodity.HighLow != null)
                                                {
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                                }
                                                if (mPCommodity.QCommodity.Close != null)
                                                {
                                                    AccountSumTotal = mPCommodity.QCommodity.Close.MatchTotalAmt;
                                                    AccountQuantityTotal = mPCommodity.QCommodity.Close.MatchTotalQty;
                                                    AccountOrderTotal = mPCommodity.QCommodity.Close.MatchTotalCnt;
                                                }

                                                mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, IndexValue, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, IndexValue);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            }

                                            //if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) < int.Parse(InformationSeq)) || InformationTime=="999999")
                                            //{
                                                AccountSumTotal = 0;
                                                AccountQuantityTotal = 0;
                                                AccountOrderTotal = 0;
                                                AccountSum = 0;
                                                AccountQuantity = 0;

                                                if (mPCommodity.QCommodity.Match != null)
                                                {
                                                    AccountSum = mPCommodity.QCommodity.Match.MatchAmt;
                                                    AccountQuantity = mPCommodity.QCommodity.Match.MatchQty;
                                                    AccountSumTotal = mPCommodity.QCommodity.Match.MatchTotalAmt;
                                                    AccountQuantityTotal = mPCommodity.QCommodity.Match.MatchTotalQty;
                                                    AccountOrderTotal = mPCommodity.QCommodity.Match.MatchTotalCnt;
                                                }

                                                mPCommodity.SetMatch(InformationTime, InformationSeq, 1, InformationTime, IndexValue, AccountQuantity, AccountSum, AccountSumTotal, AccountQuantityTotal, AccountOrderTotal, 0, 0);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                //mPCommodity.SetMatch(InformationTime, InformationSeq, InformationTime, IndexValue, 0, 0);

                                                /*if (IndexCode == "4000")
                                                {
                                                    if (InformationTime == "999999")
                                                    {
                                                        mPCommodity.QCommodity.Match.MatchSeq = 2;
                                                        DoSendWrite(mPCommodity.QCommodity.Match);
                                                    }
                                                    else
                                                    {
                                                        if (m_QuoteSetting.IsSendTicks)
                                                            mPCommodity.Send(mPCommodity.QCommodity.Match.Copy());
                                                        else
                                                            mPCommodity.Send(mPCommodity.QCommodity.Match);
                                                    }
                                                }
                                                else
                                                {
                                                    DoSendWrite(mPCommodity.QCommodity.Match);
                                                }*/

                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                WriteTicksLog(mPCommodity, InformationTime, IndexValue, AccountSum, AccountSumTotal, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "1");

                                                HighPrice = 0.0;
                                                LowPrice = 0.0;
                                                if (mPCommodity.QCommodity.HighLow != null)
                                                {
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                                }

                                                //最高最低
                                                if (int.Parse(InformationSeq) > 1 && (HighPrice < IndexValue || HighPrice == 0.0))
                                                {
                                                    mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, LowPrice, InformationTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                                if (int.Parse(InformationSeq) > 1 && (LowPrice > IndexValue || LowPrice == 0.0))
                                                {
                                                    mPCommodity.SetHighLow(InformationTime, InformationSeq, HighPrice, IndexValue, InformationTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                            //}
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc03 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 4:
                                    #region //上櫃等價交易委託統計資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc04 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 5:
                                    #region //上櫃公告資訊
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc05 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 6:
                                    #region //上櫃等價交易即時行情資訊
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc06 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        //modify 20150610
                                        nPos = 29;

                                        MatchPrice = 0.0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;
                                        oldMatchTOTALQty = 0;
                                        OpenPrice = 0;
                                        BuyPriceBest1 = 0;
                                        BuyQtyBest1 = 0;
                                        BuyPriceBest2 = 0;
                                        BuyQtyBest2 = 0;
                                        BuyPriceBest3 = 0;
                                        BuyQtyBest3 = 0;
                                        BuyPriceBest4 = 0;
                                        BuyQtyBest4 = 0;
                                        BuyPriceBest5 = 0;
                                        BuyQtyBest5 = 0;
                                        SellPriceBest1 = 0;
                                        SellQtyBest1 = 0;
                                        SellPriceBest2 = 0;
                                        SellQtyBest2 = 0;
                                        SellPriceBest3 = 0;
                                        SellQtyBest3 = 0;
                                        SellPriceBest4 = 0;
                                        SellQtyBest4 = 0;
                                        SellPriceBest5 = 0;
                                        SellQtyBest5 = 0;
                                        IsDepthChange = false;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        //if (sCommodityCode == 0) { break; }

                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }

                                        //MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00");

                                        //if (int.Parse(MatchTime) < 80000) { break; }
                                        if (long.Parse(MatchTime) < 80000000000) { break; }

                                        //modify 20150610
                                        sDisPlayTag = (int)bte[22];
                                        sFallRiseTag = (int)(bte[23] & 3);

                                        #region//check seq start
                                        if (m_QuoteSetting.IsCheckLost && m_QuoteSetting.IsRegisterAll)
                                        {
                                            Match_seq = Convert.ToInt32(InformationSeq);

                                            if (Match_seq != 0 && Match_seq != 1)
                                            {
                                                if (Match_seq - Otc_Match_seq != 1 && Match_seq > Otc_Match_seq)
                                                {
                                                    Otc_PacketLost_Qty += Match_seq - Otc_Match_seq - 1;
                                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Lost Otc_Match]" + " Seq Time:" + MatchTime + " LostQty:" + Otc_PacketLost_Qty + " Last:" + Otc_Match_seq + " Current:" + Match_seq);
                                                }
                                            }
                                            else
                                                Otc_PacketLost_Qty = 0;

                                            if (Match_seq > Otc_Match_seq)
                                                Otc_Match_seq = Match_seq;
                                        }
                                        #endregion//check seq end

                                        nResult = sDisPlayTag >> 7;
                                        nStatusTag = (int)bte[24] >> 7;

                                        //modify 20150610
                                        if (nStatusTag == 0)
                                            MatchTOTALQty = int.Parse(int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));

                                        nkindflag = "";

                                        if (nResult == 1)
                                        {
                                            MatchPrice = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                            //modify 20150610
                                            if (nStatusTag == 0)
                                            {
                                                nkindflag = "L";
                                                MatchQuantity = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                            }
                                            nPos = nPos + 7;
                                        }
                                        else
                                        {
                                            MatchPrice = 0.0;
                                            MatchQuantity = 0;
                                        }

                                        bool IsHasBidAsk = false;

                                        //買進五擋
                                        nResult = (sDisPlayTag & 112) >> 4;

                                        if (nResult > 0) 
                                        {
                                            nkindflag += "D";
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    BuyPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    BuyPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    BuyPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    BuyPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    BuyPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }
                                        //賣出五擋
                                        nResult = (sDisPlayTag & 14) >> 1;

                                        if (nResult > 0)
                                        {
                                            if (nkindflag.IndexOf("D") == -1) { nkindflag += "D"; }
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    SellPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    SellPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    SellPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    SellPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    SellPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }

                                        if (Math.Round(BuyPriceBest1, 5) != Math.Round(oldBuyPriceBest1, 5) || Math.Round(BuyPriceBest2, 5) != Math.Round(oldBuyPriceBest2, 5) || Math.Round(BuyPriceBest3, 5) != Math.Round(oldBuyPriceBest3, 5) || Math.Round(BuyPriceBest4, 5) != Math.Round(oldBuyPriceBest4, 5) || Math.Round(BuyPriceBest5, 5) != Math.Round(oldBuyPriceBest5, 5) ||
                                            BuyQtyBest1 != oldBuyQtyBest1 || BuyQtyBest2 != oldBuyQtyBest2 || BuyQtyBest3 != oldBuyQtyBest3 || BuyQtyBest4 != oldBuyQtyBest4 || BuyQtyBest5 != oldBuyQtyBest5 ||
                                            Math.Round(SellPriceBest1, 5) != Math.Round(oldSellPriceBest1, 5) || Math.Round(SellPriceBest2, 5) != Math.Round(oldSellPriceBest2, 5) || Math.Round(SellPriceBest3, 5) != Math.Round(oldSellPriceBest3, 5) || Math.Round(SellPriceBest4, 5) != Math.Round(oldSellPriceBest4, 5) || Math.Round(SellPriceBest5, 5) != Math.Round(oldSellPriceBest5, 5) ||
                                            SellQtyBest1 != oldSellQtyBest1 || SellQtyBest2 != oldSellQtyBest2 || SellQtyBest3 != oldSellQtyBest3 || SellQtyBest4 != oldSellQtyBest4 || SellQtyBest5 != oldSellQtyBest5
                                            )
                                        {
                                            IsDepthChange = true;
                                        }

                                        oldBuyPriceBest1 = BuyPriceBest1;
                                        oldBuyQtyBest1 = BuyQtyBest1;
                                        oldBuyPriceBest2 = BuyPriceBest2;
                                        oldBuyQtyBest2 = BuyQtyBest2;
                                        oldBuyPriceBest3 = BuyPriceBest3;
                                        oldBuyQtyBest3 = BuyQtyBest3;
                                        oldBuyPriceBest4 = BuyPriceBest4;
                                        oldBuyQtyBest4 = BuyQtyBest4;
                                        oldBuyPriceBest5 = BuyPriceBest5;
                                        oldBuyQtyBest5 = BuyQtyBest5;
                                        oldSellPriceBest1 = SellPriceBest1;
                                        oldSellQtyBest1 = SellQtyBest1;
                                        oldSellPriceBest2 = SellPriceBest2;
                                        oldSellQtyBest2 = SellQtyBest2;
                                        oldSellPriceBest3 = SellPriceBest3;
                                        oldSellQtyBest3 = SellQtyBest3;
                                        oldSellPriceBest4 = SellPriceBest4;
                                        oldSellQtyBest4 = SellQtyBest4;
                                        oldSellPriceBest5 = SellPriceBest5;
                                        oldSellQtyBest5 = SellQtyBest5;
                                        //if (mPCommodity == null) { mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString()); }
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }
                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc06 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        #region 寫HTicks

                                        /*if (MatchTime.Length >= 6 && int.Parse(MatchTime.Substring(0, 6)) >= 90000)
                                        {
                                            HTicks HTicks = new HTicks();
                                            HTicks.TradeDate = DateTime.Now.ToString("yyyy/MM/dd");
                                            HTicks.CommodityId = mPCommodity.CommodityId;
                                            HTicks.InformationTime = MatchTime;
                                            HTicks.InformationSeq = InformationSeq;
                                            HTicks.MatchSeq = 1;
                                            HTicks.MatchTime = MatchTime;
                                            HTicks.MatchPrice = MatchPrice;
                                            HTicks.MatchTotalQty = MatchTOTALQty;
                                            HTicks.BuyPriceBest1 = BuyPriceBest1;
                                            HTicks.BuyQtyBest1 = BuyQtyBest1;
                                            HTicks.SellPriceBest1 = SellPriceBest1;
                                            HTicks.SellQtyBest1 = SellQtyBest1;

                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || int.Parse(mPCommodity.QCommodity.Match.MatchTime.Substring(0, 6)) < 90000 || MatchTOTALQty == 0)
                                                HTicks.MatchQty = MatchTOTALQty;
                                            else
                                                HTicks.MatchQty = MatchTOTALQty - mPCommodity.QCommodity.Match.MatchTotalQty;

                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HTicks); }
                                        }*/

                                        #endregion

                                        //if (BuyQtyBest1 != 0 || SellQtyBest1 != 0)
                                        if (IsDepthChange)
                                        {
                                            if (mPCommodity.QCommodity.Best5 == null || mPCommodity.QCommodity.Best5.InformationSeq == null || mPCommodity.QCommodity.Best5.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Best5.InformationSeq) < int.Parse(InformationSeq)))
                                            {
                                                mPCommodity.SetBest5(MatchTime, InformationSeq, BuyPriceBest1, BuyQtyBest1, BuyPriceBest2, BuyQtyBest2, BuyPriceBest3, BuyQtyBest3, BuyPriceBest4, BuyQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest1, SellQtyBest1, SellPriceBest2, SellQtyBest2, SellPriceBest3, SellQtyBest3, SellPriceBest4, SellQtyBest4, SellPriceBest5, SellQtyBest5);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Best5);*/
                                                DoSendWrite(mPCommodity.QCommodity.Best5);
                                                /*mPCommodity.Send(Best5);
                                                if (m_QuoteSetting.IsWriteToDb) { WriteDBPool.Enqueue(Best5); }*/
                                            }
                                        }

                                        if (nkindflag != "")
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty, BuyPriceBest1, BuyQtyBest1, SellPriceBest1, SellQtyBest1, BuyPriceBest2, BuyQtyBest2, SellPriceBest2, SellQtyBest2, BuyPriceBest3, BuyQtyBest3, SellPriceBest3, SellQtyBest3, BuyPriceBest4, BuyQtyBest4, SellPriceBest4, SellQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest5, SellQtyBest5, nkindflag, InformationSeq, MatchTime, "1");

                                        if (MatchPrice != 0.0)
                                        {
                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || (long.Parse(mPCommodity.QCommodity.Match.MatchTime) <= long.Parse(MatchTime)))
                                            {
                                                if (mPCommodity.QCommodity.Match != null)
                                                    oldMatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                                if (mPCommodity.QCommodity.Match != null && MatchTOTALQty <= oldMatchTOTALQty)
                                                    break;

                                                if (MatchTOTALQty == 0)
                                                    break;

                                                mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchTOTALQty - oldMatchTOTALQty, MatchTOTALQty);
                                                mPCommodity.QCommodity.Match.FallRiseTag = sFallRiseTag;
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                                                                
                                                /*mPCommodity.Send(Match);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                                if (mPCommodity.QCommodity.HighLow == null)
                                                {
                                                    mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, MatchPrice, MatchTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                                else
                                                {
                                                    if (mPCommodity.QCommodity.HighLow.DayHighPrice < MatchPrice || (mPCommodity.QCommodity.HighLow.DayHighPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, mPCommodity.QCommodity.HighLow.DayLowPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                    if (mPCommodity.QCommodity.HighLow.DayLowPrice > MatchPrice || (mPCommodity.QCommodity.HighLow.DayLowPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, mPCommodity.QCommodity.HighLow.DayHighPrice, MatchPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                }                                                
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc06 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 7:
                                    #region //上櫃定價交易成交統計資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc07 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00") + int.Parse(bte[12].ToString("x")).ToString("00");

                                        if (InformationTime == "999999")
                                            break;

                                        mPCommodity = m_PCommodityList.Set("4000", "4000", m_CMarket.Market, CommodityKind.Index);

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, "", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", "", 0, 0, 0, 1, "", ""); }

                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq != InformationSeq)
                                        {
                                            AccountSumTotal = double.Parse(int.Parse(bte[13].ToString("x")).ToString("00") + int.Parse(bte[14].ToString("x")).ToString("00") + int.Parse(bte[15].ToString("x")).ToString("00") + int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00"));
                                            AccountQuantityTotal = int.Parse(int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));
                                            AccountOrderTotal = int.Parse(int.Parse(bte[29].ToString("x")).ToString("00") + int.Parse(bte[30].ToString("x")).ToString("00") + int.Parse(bte[31].ToString("x")).ToString("00") + int.Parse(bte[32].ToString("x")).ToString("00") + int.Parse(bte[33].ToString("x")).ToString("00"));

                                            //InformationSeq = "1" + InformationSeq.Substring(1);
                                            /*if (m_QuoteSetting.IsCalculateGreeks)
                                                m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                            mPCommodity.SetMatch(InformationTime, InformationSeq, 3, InformationTime, mPCommodity.QCommodity.Match.MatchPrice, AccountQuantityTotal, AccountSumTotal, AccountSumTotal + mPCommodity.QCommodity.Match.MatchTotalAmt, AccountQuantityTotal + mPCommodity.QCommodity.Match.MatchTotalQty, AccountOrderTotal + mPCommodity.QCommodity.Match.MatchTotalCnt, 0, 0);
                                            //DoSendWrite(mPCommodity.QCommodity.Match);
                                            /*mPCommodity.Send(Match);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc07 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 8:
                                    #region //上櫃定價交易委託統計資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc08 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 9:
                                    #region //上櫃定價交易個股成交資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc09 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        MatchPrice = 0.0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        //if (sCommodityCode == 0) { break; }
                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }

                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchPrice = double.Parse(int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00")) / 100;
                                        MatchQuantity = int.Parse(int.Parse(bte[22].ToString("x")).ToString("00") + int.Parse(bte[23].ToString("x")).ToString("00") + int.Parse(bte[24].ToString("x")).ToString("00") + int.Parse(bte[25].ToString("x")).ToString("00"));

                                        //if (mPCommodity == null) { mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString()); }
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }
                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc09 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        if ((mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq != InformationSeq) && MatchQuantity != 0)
                                        {
                                            if (mPCommodity.QCommodity.Match != null)
                                                MatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                            mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty + MatchQuantity);
                                            /*if (m_QuoteSetting.IsCalculateGreeks)
                                                m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                            DoSendWrite(mPCommodity.QCommodity.Match);
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty + MatchQuantity, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, MatchTime, "1");

                                            if (mPCommodity.QCommodity.Close != null)
                                            {
                                                mPCommodity.SetClose(mPCommodity.QCommodity.Close.InformationTime, mPCommodity.QCommodity.Close.InformationSeq, mPCommodity.QCommodity.Close.DayHighPrice, mPCommodity.QCommodity.Close.DayLowPrice, mPCommodity.QCommodity.Close.OpenPrice, mPCommodity.QCommodity.Close.BuyPrice, mPCommodity.QCommodity.Close.SellPrice, mPCommodity.QCommodity.Close.ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, mPCommodity.QCommodity.Match.MatchTotalQty, 0.0, mPCommodity.QCommodity.Close.SettlementPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc09 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 10:
                                    #region //上櫃定價交易個股委託資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc10 ERROR CHECKSUM ERROR]");
                                            break;
                                        }
                                        
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc10 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 11:
                                    #region //上櫃等價交易開(收)盤資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc11 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        StkCnt = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00"));

                                        for (int i = 0; i < StkCnt; i++)
                                        {
                                            //modify 20150610
                                            sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 11 + i * 28, 6).Trim();
                                            OpenPrice = double.Parse(int.Parse(bte[17 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[18 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[19 + i * 28].ToString("x")).ToString("00")) / 100;
                                            HighPrice = double.Parse(int.Parse(bte[20 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[21 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[22 + i * 28].ToString("x")).ToString("00")) / 100;
                                            LowPrice = double.Parse(int.Parse(bte[23 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[24 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[25 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchPrice = double.Parse(int.Parse(bte[26 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[27 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[28 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchTOTALQty = int.Parse(int.Parse(bte[29 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[30 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[31 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[32 + i * 28].ToString("x")).ToString("00"));
                                            ShowTime = int.Parse(bte[33 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[34 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[35 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[36 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[37 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[38 + i * 28].ToString("x")).ToString("00");
                                            ShowTime = ShowTime.Substring(0, 6);

                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None);
                                                                                        
                                            if ((mPCommodity.QCommodity.Open == null || mPCommodity.QCommodity.Open.OpenPrice == 0.0) && OpenPrice != 0.0)
                                            {
                                                mPCommodity.SetOpen(ShowTime, OpenPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/
                                            }

                                            if (mPCommodity.QCommodity.HighLow == null)
                                            {
                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }
                                            else
                                            {
                                                if (mPCommodity.QCommodity.HighLow.DayHighPrice > HighPrice)
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                if (mPCommodity.QCommodity.HighLow.DayLowPrice < LowPrice)
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;

                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }

                                            //if (ShowTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (ShowTime == "999999")
                                            {
                                                BuyPriceBest1 = 0.0;
                                                SellPriceBest1 = 0.0;
                                                
                                                if (mPCommodity.QCommodity.Best5 != null)
                                                {
                                                    BuyPriceBest1 = mPCommodity.QCommodity.Best5.BuyPriceBest1;
                                                    SellPriceBest1 = mPCommodity.QCommodity.Best5.SellPriceBest1;
                                                }

                                                ClosePrice = MatchPrice;
                                                SettlePrice = MatchPrice;
                                                if (SettlePrice == 0.0) { SettlePrice = mPCommodity.QCommodity.Base.ReferencePrice; }

                                                mPCommodity.SetClose(ShowTime, InformationSeq, HighPrice, LowPrice, OpenPrice, BuyPriceBest1, SellPriceBest1, ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, MatchTOTALQty, 0.0, SettlePrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc11 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 12:
                                    #region //新編櫃買指數資料
                                    /*try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc12 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        StkCnt = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00"));

                                        for (int i = 0; i < StkCnt; i++)
                                        {
                                            try
                                            {
                                                InformationTime = int.Parse(bte[17 + i * 13].ToString("x")).ToString("00") + int.Parse(bte[18 + i * 13].ToString("x")).ToString("00") + int.Parse(bte[19 + i * 13].ToString("x")).ToString("00");
                                                IndexCode = System.Text.UnicodeEncoding.Default.GetString(bte, 11 + i * 13, 6).Trim(); ;
                                                ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][" + IndexCode + "]");
                                                    
                                                IndexValue = double.Parse(int.Parse(bte[20 + i * 13].ToString("x")).ToString("00") + int.Parse(bte[21 + i * 13].ToString("x")).ToString("00") + int.Parse(bte[22 + i * 13].ToString("x")).ToString("00") + int.Parse(bte[23 + i * 13].ToString("x")).ToString("00")) / 100;

                                                mPCommodity = m_PCommodityList.Set(IndexCode, IndexCode, m_CMarket.Market, CommodityKind.Index);
                                                //mPCommodity.CMarket.SetCommodity(IndexCode, mPCommodity);
                                                CodeMap cm = m_CMarket.GetCodeMap(CommodityKind.Index, IndexCode);

                                                if (cm == null)
                                                {
                                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Otc12 ERROR " + "][No Commodity][" + IndexCode + "]");
                                                    continue;
                                                }

                                                if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, "", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "", ""); }

                                                if (InformationSeq == "00000000")
                                                {
                                                    mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, cm.Code, cm.CodeNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), InformationTime, InformationSeq, IndexValue, 0.0, 0.0, 1, "", "");
                                                    DoSendWrite(mPCommodity.QCommodity.Base);
                                                    mPCommodity.Send(Base);
                                                    //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }
                                                    //continue;
                                                }
                                                if (InformationSeq == "00000002")
                                                {
                                                    mPCommodity.SetOpen(InformationTime, IndexValue);
                                                    DoSendWrite(mPCommodity.QCommodity.Open);
                                                    //mPCommodity.Send(Open);
                                                    //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }

                                                    mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, IndexValue, InformationTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    //mPCommodity.Send(HighLow);
                                                    //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }
                                                }
                                                if (InformationTime == "999999")
                                                {
                                                    HighPrice = 0.0;
                                                    LowPrice = 0.0;
                                                    OpenPrice = 0.0;
                                                    AccountSumTotal = 0;
                                                    AccountQuantityTotal = 0;
                                                    AccountOrderTotal = 0;

                                                    if (mPCommodity.QCommodity.Open != null)
                                                        OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                                    if (mPCommodity.QCommodity.HighLow != null)
                                                    {
                                                        HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                        LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                                    }
                                                    if (mPCommodity.QCommodity.Close != null)
                                                    {
                                                        AccountSumTotal = mPCommodity.QCommodity.Close.MatchTotalAmt;
                                                        AccountQuantityTotal = mPCommodity.QCommodity.Close.MatchTotalQty;
                                                        AccountOrderTotal = mPCommodity.QCommodity.Close.MatchTotalCnt;
                                                    }

                                                    mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, IndexValue, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, IndexValue);
                                                    DoSendWrite(mPCommodity.QCommodity.Close);
                                                    //mPCommodity.Send(Close);
                                                    //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }

                                                }
                                                if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) < int.Parse(InformationSeq)))
                                                {
                                                    mPCommodity.SetMatch(InformationTime, InformationSeq, InformationTime, IndexValue, 0, 0);
                                                    //if (m_QuoteSetting.IsCalculateGreeks)
                                                    //    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);
                                                    DoSendWrite(mPCommodity.QCommodity.Match);
                                                    WriteTicksLog(mPCommodity, InformationTime, IndexValue, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "1");
                                                    //mPCommodity.Send(Match);
                                                    //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }

                                                    HighPrice = 0.0;
                                                    LowPrice = 0.0;
                                                    if (mPCommodity.QCommodity.HighLow != null)
                                                    {
                                                        HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                        LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                                    }

                                                    //最高最低
                                                    if (int.Parse(InformationSeq) > 1 && (HighPrice < IndexValue || HighPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, LowPrice, InformationTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        //mPCommodity.Send(HighLow);
                                                        //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }
                                                    }
                                                    if (int.Parse(InformationSeq) > 1 && (LowPrice > IndexValue || LowPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(InformationTime, InformationSeq, HighPrice, IndexValue, InformationTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        //mPCommodity.Send(HighLow);
                                                        //if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }
                                                    }
                                                }
                                            }
                                            catch (Exception eg)
                                            {
                                                ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc12 ERROR " + "][" + eg.Message + "][" + eg.StackTrace + "]");
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc12 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }*/
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc12 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        InformationTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        IndexCode = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim(); ;
                                        IndexValue = double.Parse(int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00") + int.Parse(bte[22].ToString("x")).ToString("00")) / 100;

                                        //Console.WriteLine(IndexCode + "--" + IndexValue + "--OTC");
                                        if (IndexCode == "IX0103") { break; }

                                        mPCommodity = m_PCommodityList.Set(IndexCode, IndexCode, m_CMarket.Market, CommodityKind.Index);
                                        //mPCommodity.CMarket.SetCommodity(IndexCode, mPCommodity);
                                        CodeMap cm = m_CMarket.GetCodeMap(CommodityKind.Index, IndexCode);

                                        if (cm == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc12 ERROR " + "][No Commodity][" + IndexCode + "]");
                                            break;
                                        }

                                        if (mPCommodity.QCommodity.Base == null || mPCommodity.QCommodity.Base.TradeDate < TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone)) { mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, "", "", TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), "", "", 0.0, 0.0, 0.0, 1, "", ""); }

                                        if (InformationSeq == "00000000")
                                        {
                                            mPCommodity.SetBase(m_CMarket.Market, CommodityKind.Index, CommodityType.None, cm.Code, cm.CodeNm, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), InformationTime, InformationSeq, IndexValue, 0.0, 0.0, 1, "", "");
                                            DoSendWrite(mPCommodity.QCommodity.Base);
                                            /*mPCommodity.Send(Base);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Base); }*/
                                            break;
                                        }
                                        if (InformationSeq == "00000002")
                                        {
                                            mPCommodity.SetOpen(InformationTime, IndexValue);
                                            DoSendWrite(mPCommodity.QCommodity.Open);
                                            /*mPCommodity.Send(Open);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/

                                            mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, IndexValue, InformationTime);
                                            DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            /*mPCommodity.Send(HighLow);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                        }
                                        if (InformationTime == "999999")
                                        {
                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            OpenPrice = 0.0;
                                            AccountSumTotal = 0;
                                            AccountQuantityTotal = 0;
                                            AccountOrderTotal = 0;

                                            if (mPCommodity.QCommodity.Open != null)
                                                OpenPrice = mPCommodity.QCommodity.Open.OpenPrice;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                            }
                                            if (mPCommodity.QCommodity.Close != null)
                                            {
                                                AccountSumTotal = mPCommodity.QCommodity.Close.MatchTotalAmt;
                                                AccountQuantityTotal = mPCommodity.QCommodity.Close.MatchTotalQty;
                                                AccountOrderTotal = mPCommodity.QCommodity.Close.MatchTotalCnt;
                                            }

                                            mPCommodity.SetClose(InformationTime, InformationSeq, HighPrice, LowPrice, OpenPrice, 0.0, 0.0, IndexValue, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), AccountOrderTotal, AccountQuantityTotal, AccountSumTotal, IndexValue);
                                            DoSendWrite(mPCommodity.QCommodity.Close);
                                            /*mPCommodity.Send(Close);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/

                                        }
                                        if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.InformationSeq == null || mPCommodity.QCommodity.Match.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Match.InformationSeq) < int.Parse(InformationSeq)))
                                        {
                                            mPCommodity.SetMatch(InformationTime, InformationSeq, InformationTime, IndexValue, 0, 0);
                                            /*if (m_QuoteSetting.IsCalculateGreeks)
                                                m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                            DoSendWrite(mPCommodity.QCommodity.Match);
                                            WriteTicksLog(mPCommodity, InformationTime, IndexValue, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "L", InformationSeq, InformationTime, "1");
                                            /*mPCommodity.Send(Match);
                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                            HighPrice = 0.0;
                                            LowPrice = 0.0;
                                            if (mPCommodity.QCommodity.HighLow != null)
                                            {
                                                HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;
                                            }

                                            //最高最低
                                            if (int.Parse(InformationSeq) > 1 && (HighPrice < IndexValue || HighPrice == 0.0))
                                            {
                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, IndexValue, LowPrice, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }
                                            if (int.Parse(InformationSeq) > 1 && (LowPrice > IndexValue || LowPrice == 0.0))
                                            {
                                                mPCommodity.SetHighLow(InformationTime, InformationSeq, HighPrice, IndexValue, InformationTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                /*mPCommodity.Send(HighLow);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc12 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion                                
                                case 13:
                                    #region //上櫃零股交易即時揭示資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc13 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 14:
                                    #region //上櫃認購(售)權證全稱資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc14 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 15:
                                    #region //上櫃當日停止交易股票資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc15 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 16:
                                    #region //上櫃行情傳輸系統HeartBeat資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc16 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion                                
                                case 17:
                                    #region //第二IP上櫃股票等價交易即時行情資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc17 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        //modify 20150610
                                        nPos = 29;

                                        MatchPrice = 0;
                                        MatchQuantity = 0;
                                        MatchTOTALQty = 0;
                                        OpenPrice = 0;
                                        BuyPriceBest1 = 0;
                                        BuyQtyBest1 = 0;
                                        BuyPriceBest2 = 0;
                                        BuyQtyBest2 = 0;
                                        BuyPriceBest3 = 0;
                                        BuyQtyBest3 = 0;
                                        BuyPriceBest4 = 0;
                                        BuyQtyBest4 = 0;
                                        BuyPriceBest5 = 0;
                                        BuyQtyBest5 = 0;
                                        SellPriceBest1 = 0;
                                        SellQtyBest1 = 0;
                                        SellPriceBest2 = 0;
                                        SellQtyBest2 = 0;
                                        SellPriceBest3 = 0;
                                        SellQtyBest3 = 0;
                                        SellPriceBest4 = 0;
                                        SellQtyBest4 = 0;
                                        SellPriceBest5 = 0;
                                        SellQtyBest5 = 0;
                                        IsDepthChange = false;

                                        //sCommodityCode = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00") + int.Parse(bte[11].ToString("x")).ToString("00"));
                                        sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 10, 6).Trim();
                                        if (sCommodityId == "000000") { break; }

                                        //MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00");
                                        MatchTime = int.Parse(bte[16].ToString("x")).ToString("00") + int.Parse(bte[17].ToString("x")).ToString("00") + int.Parse(bte[18].ToString("x")).ToString("00") + int.Parse(bte[19].ToString("x")).ToString("00") + int.Parse(bte[20].ToString("x")).ToString("00") + int.Parse(bte[21].ToString("x")).ToString("00");

                                        //if (int.Parse(MatchTime) < 80000) { break; }
                                        if (long.Parse(MatchTime) < 80000000000) { break; }

                                        //modify 20150610
                                        sDisPlayTag = (int)bte[22];
                                        sFallRiseTag = (int)(bte[23] & 3);

                                        #region//check seq start
                                        if (m_QuoteSetting.IsCheckLost && m_QuoteSetting.IsRegisterAll)
                                        {
                                            Match_seq = Convert.ToInt32(InformationSeq);

                                            if (Match_seq != 0 && Match_seq != 1)
                                            {
                                                if (Match_seq - Otc_Match_seq != 1 && Match_seq > Otc_Match_seq)
                                                {
                                                    Otc_PacketLost_Qty += Match_seq - Otc_Match_seq - 1;
                                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc2_Error][Lost Otc_Match]" + " Seq Time:" + MatchTime + " LostQty:" + Otc_PacketLost_Qty + " Last:" + Otc_Match_seq + " Current:" + Match_seq);
                                                }
                                            }
                                            else
                                                Otc_PacketLost_Qty = 0;

                                            if (Match_seq > Otc_Match_seq)
                                                Otc_Match_seq = Match_seq;
                                        }
                                        #endregion//check seq end

                                        nResult = sDisPlayTag >> 7;
                                        nStatusTag = (int)bte[24] >> 7;

                                        //modify 20150610
                                        if (nStatusTag == 0)
                                            MatchTOTALQty = int.Parse(int.Parse(bte[25].ToString("x")).ToString("00") + int.Parse(bte[26].ToString("x")).ToString("00") + int.Parse(bte[27].ToString("x")).ToString("00") + int.Parse(bte[28].ToString("x")).ToString("00"));

                                        nkindflag = "";

                                        if (nResult == 1)
                                        {
                                            MatchPrice = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;                                            
                                            //modify 20150610
                                            if (nStatusTag == 0)
                                            {
                                                nkindflag = "L";
                                                MatchQuantity = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                            }
                                            nPos = nPos + 7;
                                        }
                                        else
                                        {
                                            MatchPrice = 0.0;
                                            MatchQuantity = 0;
                                        }

                                        bool IsHasBidAsk = false;

                                        //買進五擋
                                        nResult = (sDisPlayTag & 112) >> 4;

                                        if (nResult > 0) 
                                        {
                                            nkindflag += "D";
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    BuyPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    BuyPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    BuyPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    BuyPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    BuyPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    BuyQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }
                                        //賣出五擋
                                        nResult = (sDisPlayTag & 14) >> 1;

                                        if (nResult > 0) 
                                        {
                                            if (nkindflag.IndexOf("D") == -1) { nkindflag += "D"; }
                                            IsHasBidAsk = true; 
                                        }

                                        for (int j = 0; j < nResult; j++)
                                        {
                                            switch (j)
                                            {
                                                case 0:
                                                    SellPriceBest1 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest1 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 1:
                                                    SellPriceBest2 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest2 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 2:
                                                    SellPriceBest3 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest3 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 3:
                                                    SellPriceBest4 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest4 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                case 4:
                                                    SellPriceBest5 = double.Parse(int.Parse(bte[nPos].ToString("x")).ToString("00") + int.Parse(bte[nPos + 1].ToString("x")).ToString("00") + int.Parse(bte[nPos + 2].ToString("x")).ToString("00")) / 100;
                                                    SellQtyBest5 = int.Parse(int.Parse(bte[nPos + 3].ToString("x")).ToString("00") + int.Parse(bte[nPos + 4].ToString("x")).ToString("00") + int.Parse(bte[nPos + 5].ToString("x")).ToString("00") + int.Parse(bte[nPos + 6].ToString("x")).ToString("00"));
                                                    break;
                                                default:
                                                    break;
                                            }
                                            nPos = nPos + 7;
                                        }

                                        if (Math.Round(BuyPriceBest1, 5) != Math.Round(oldBuyPriceBest1, 5) || Math.Round(BuyPriceBest2, 5) != Math.Round(oldBuyPriceBest2, 5) || Math.Round(BuyPriceBest3, 5) != Math.Round(oldBuyPriceBest3, 5) || Math.Round(BuyPriceBest4, 5) != Math.Round(oldBuyPriceBest4, 5) || Math.Round(BuyPriceBest5, 5) != Math.Round(oldBuyPriceBest5, 5) ||
                                            BuyQtyBest1 != oldBuyQtyBest1 || BuyQtyBest2 != oldBuyQtyBest2 || BuyQtyBest3 != oldBuyQtyBest3 || BuyQtyBest4 != oldBuyQtyBest4 || BuyQtyBest5 != oldBuyQtyBest5 ||
                                            Math.Round(SellPriceBest1, 5) != Math.Round(oldSellPriceBest1, 5) || Math.Round(SellPriceBest2, 5) != Math.Round(oldSellPriceBest2, 5) || Math.Round(SellPriceBest3, 5) != Math.Round(oldSellPriceBest3, 5) || Math.Round(SellPriceBest4, 5) != Math.Round(oldSellPriceBest4, 5) || Math.Round(SellPriceBest5, 5) != Math.Round(oldSellPriceBest5, 5) ||
                                            SellQtyBest1 != oldSellQtyBest1 || SellQtyBest2 != oldSellQtyBest2 || SellQtyBest3 != oldSellQtyBest3 || SellQtyBest4 != oldSellQtyBest4 || SellQtyBest5 != oldSellQtyBest5
                                            )
                                        {
                                            IsDepthChange = true;
                                        }

                                        oldBuyPriceBest1 = BuyPriceBest1;
                                        oldBuyQtyBest1 = BuyQtyBest1;
                                        oldBuyPriceBest2 = BuyPriceBest2;
                                        oldBuyQtyBest2 = BuyQtyBest2;
                                        oldBuyPriceBest3 = BuyPriceBest3;
                                        oldBuyQtyBest3 = BuyQtyBest3;
                                        oldBuyPriceBest4 = BuyPriceBest4;
                                        oldBuyQtyBest4 = BuyQtyBest4;
                                        oldBuyPriceBest5 = BuyPriceBest5;
                                        oldBuyQtyBest5 = BuyQtyBest5;
                                        oldSellPriceBest1 = SellPriceBest1;
                                        oldSellQtyBest1 = SellQtyBest1;
                                        oldSellPriceBest2 = SellPriceBest2;
                                        oldSellQtyBest2 = SellQtyBest2;
                                        oldSellPriceBest3 = SellPriceBest3;
                                        oldSellQtyBest3 = SellQtyBest3;
                                        oldSellPriceBest4 = SellPriceBest4;
                                        oldSellQtyBest4 = SellQtyBest4;
                                        oldSellPriceBest5 = SellPriceBest5;
                                        oldSellQtyBest5 = SellQtyBest5;

                                        //if (mPCommodity == null) { mPCommodity = m_CMarket.GetInnerCode(sCommodityCode.ToString()); }
                                        /*if (mPCommodity == null) { mPCommodity = m_PCommodityList.Get(sCommodityId); }
                                        if (mPCommodity == null)
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc17 ERROR " + "][No Mapping Code-" + sCommodityId + "]");
                                            break;
                                        }*/
                                        if (mPCommodity == null) { mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None); }

                                        #region 寫HTicks

                                        /*if (MatchTime.Length >= 6 && int.Parse(MatchTime.Substring(0, 6)) >= 90000)
                                        {
                                            HTicks HTicks = new HTicks();
                                            HTicks.TradeDate = DateTime.Now.ToString("yyyy/MM/dd");
                                            HTicks.CommodityId = mPCommodity.CommodityId;
                                            HTicks.InformationTime = MatchTime;
                                            HTicks.InformationSeq = InformationSeq;
                                            HTicks.MatchSeq = 1;
                                            HTicks.MatchTime = MatchTime;
                                            HTicks.MatchPrice = MatchPrice;
                                            HTicks.MatchTotalQty = MatchTOTALQty;
                                            HTicks.BuyPriceBest1 = BuyPriceBest1;
                                            HTicks.BuyQtyBest1 = BuyQtyBest1;
                                            HTicks.SellPriceBest1 = SellPriceBest1;
                                            HTicks.SellQtyBest1 = SellQtyBest1;

                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || int.Parse(mPCommodity.QCommodity.Match.MatchTime.Substring(0, 6)) < 90000 || MatchTOTALQty == 0)
                                                HTicks.MatchQty = MatchTOTALQty;
                                            else
                                                HTicks.MatchQty = MatchTOTALQty - mPCommodity.QCommodity.Match.MatchTotalQty;

                                            if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HTicks); }
                                        }*/

                                        #endregion

                                        //if (BuyQtyBest1 != 0 || SellQtyBest1 != 0)
                                        if (IsDepthChange)
                                        {
                                            if (mPCommodity.QCommodity.Best5 == null || mPCommodity.QCommodity.Best5.InformationSeq == null || mPCommodity.QCommodity.Best5.InformationSeq == string.Empty || (int.Parse(mPCommodity.QCommodity.Best5.InformationSeq) < int.Parse(InformationSeq)))
                                            {
                                                mPCommodity.SetBest5(MatchTime, InformationSeq, BuyPriceBest1, BuyQtyBest1, BuyPriceBest2, BuyQtyBest2, BuyPriceBest3, BuyQtyBest3, BuyPriceBest4, BuyQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest1, SellQtyBest1, SellPriceBest2, SellQtyBest2, SellPriceBest3, SellQtyBest3, SellPriceBest4, SellQtyBest4, SellPriceBest5, SellQtyBest5);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Best5);*/
                                                DoSendWrite(mPCommodity.QCommodity.Best5);
                                                /*mPCommodity.Send(Best5);
                                                if (m_QuoteSetting.IsWriteToDb) { WriteDBPool.Enqueue(Best5); }*/
                                            }
                                        }

                                        if (nkindflag != "")
                                            WriteTicksLog(mPCommodity, MatchTime, MatchPrice, MatchQuantity, MatchTOTALQty, BuyPriceBest1, BuyQtyBest1, SellPriceBest1, SellQtyBest1, BuyPriceBest2, BuyQtyBest2, SellPriceBest2, SellQtyBest2, BuyPriceBest3, BuyQtyBest3, SellPriceBest3, SellQtyBest3, BuyPriceBest4, BuyQtyBest4, SellPriceBest4, SellQtyBest4, BuyPriceBest5, BuyQtyBest5, SellPriceBest5, SellQtyBest5, nkindflag, InformationSeq, MatchTime, "1");

                                        if (MatchPrice != 0.0)
                                        {
                                            if (mPCommodity.QCommodity.Match == null || mPCommodity.QCommodity.Match.MatchTime == null || mPCommodity.QCommodity.Match.MatchTime == string.Empty || (long.Parse(mPCommodity.QCommodity.Match.MatchTime) <= long.Parse(MatchTime)))
                                            {
                                                if (mPCommodity.QCommodity.Match != null)
                                                    oldMatchTOTALQty = mPCommodity.QCommodity.Match.MatchTotalQty;

                                                if (mPCommodity.QCommodity.Match != null && MatchTOTALQty <= oldMatchTOTALQty)
                                                    break;

                                                if (MatchTOTALQty == 0)
                                                    break;

                                                mPCommodity.SetMatch(MatchTime, InformationSeq, MatchTime, MatchPrice, MatchTOTALQty - oldMatchTOTALQty, MatchTOTALQty);
                                                /*if (m_QuoteSetting.IsCalculateGreeks)
                                                    m_CalculateGreeksPool.Enqueue(mPCommodity.QCommodity.Match);*/
                                                DoSendWrite(mPCommodity.QCommodity.Match);
                                                /*mPCommodity.Send(Match);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Match); }*/

                                                if (mPCommodity.QCommodity.HighLow == null)
                                                {
                                                    mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, MatchPrice, MatchTime);
                                                    DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                    /*mPCommodity.Send(HighLow);
                                                    if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                }
                                                else
                                                {
                                                    if (mPCommodity.QCommodity.HighLow.DayHighPrice < MatchPrice || (mPCommodity.QCommodity.HighLow.DayHighPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, MatchPrice, mPCommodity.QCommodity.HighLow.DayLowPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                    if (mPCommodity.QCommodity.HighLow.DayLowPrice > MatchPrice || (mPCommodity.QCommodity.HighLow.DayLowPrice == 0.0))
                                                    {
                                                        mPCommodity.SetHighLow(MatchTime, InformationSeq, mPCommodity.QCommodity.HighLow.DayHighPrice, MatchPrice, MatchTime);
                                                        DoSendWrite(mPCommodity.QCommodity.HighLow);
                                                        /*mPCommodity.Send(HighLow);
                                                        if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(HighLow); }*/
                                                    }
                                                }

                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc17 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 18:
                                    #region //第二IP上櫃股票等價交易開(收)盤資料
                                    try
                                    {
                                        Array.Copy(bte, 1, sCheckSum, 0, Packetlength - 4);

                                        if (!Util.FunChechSum(sCheckSum, bte[Packetlength - 3]))
                                        {
                                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][Otc18 ERROR CHECKSUM ERROR]");
                                            break;
                                        }

                                        StkCnt = int.Parse(int.Parse(bte[10].ToString("x")).ToString("00"));

                                        for (int i = 0; i < StkCnt; i++)
                                        {
                                            //modify 20150610
                                            sCommodityId = System.Text.UnicodeEncoding.Default.GetString(bte, 11 + i * 28, 6).Trim();
                                            OpenPrice = double.Parse(int.Parse(bte[17 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[18 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[19 + i * 28].ToString("x")).ToString("00")) / 100;
                                            HighPrice = double.Parse(int.Parse(bte[20 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[21 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[22 + i * 28].ToString("x")).ToString("00")) / 100;
                                            LowPrice = double.Parse(int.Parse(bte[23 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[24 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[25 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchPrice = double.Parse(int.Parse(bte[26 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[27 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[28 + i * 28].ToString("x")).ToString("00")) / 100;
                                            MatchTOTALQty = int.Parse(int.Parse(bte[29 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[30 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[31 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[32 + i * 28].ToString("x")).ToString("00"));
                                            ShowTime = int.Parse(bte[33 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[34 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[35 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[36 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[37 + i * 28].ToString("x")).ToString("00") + int.Parse(bte[38 + i * 28].ToString("x")).ToString("00");
                                            ShowTime = ShowTime.Substring(0, 6);

                                            mPCommodity = m_PCommodityList.Set("", sCommodityId, m_CMarket.Market, CommodityKind.None);

                                            if (mPCommodity.QCommodity.Open == null && OpenPrice != 0.0)
                                            {
                                                mPCommodity.SetOpen(ShowTime, OpenPrice);
                                                DoSendWrite(mPCommodity.QCommodity.Open);
                                                /*mPCommodity.Send(Open);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Open); }*/
                                            }

                                            if (mPCommodity.QCommodity.HighLow == null)
                                            {
                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }
                                            else
                                            {
                                                if (mPCommodity.QCommodity.HighLow.DayHighPrice > HighPrice)
                                                    HighPrice = mPCommodity.QCommodity.HighLow.DayHighPrice;
                                                if (mPCommodity.QCommodity.HighLow.DayLowPrice < LowPrice)
                                                    LowPrice = mPCommodity.QCommodity.HighLow.DayLowPrice;

                                                mPCommodity.SetHighLow(ShowTime, InformationSeq, HighPrice, LowPrice, ShowTime);
                                                DoSendWrite(mPCommodity.QCommodity.HighLow);
                                            }

                                            //if (ShowTime == "999999" && (mPCommodity.QCommodity.Close == null || mPCommodity.QCommodity.Close.ClosePrice == 0.0))
                                            if (ShowTime == "999999")
                                            {
                                                BuyPriceBest1 = 0.0;
                                                SellPriceBest1 = 0.0;

                                                if (mPCommodity.QCommodity.Best5 != null)
                                                {
                                                    BuyPriceBest1 = mPCommodity.QCommodity.Best5.BuyPriceBest1;
                                                    SellPriceBest1 = mPCommodity.QCommodity.Best5.SellPriceBest1;
                                                }

                                                ClosePrice = MatchPrice;
                                                SettlePrice = MatchPrice;
                                                if (SettlePrice == 0.0) { SettlePrice = mPCommodity.QCommodity.Base.ReferencePrice; }

                                                mPCommodity.SetClose(ShowTime, InformationSeq, HighPrice, LowPrice, OpenPrice, BuyPriceBest1, SellPriceBest1, ClosePrice, TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTime.Today, m_CMarket.TimeZone), 0, MatchTOTALQty, 0.0, SettlePrice);
                                                DoSendWrite(mPCommodity.QCommodity.Close);
                                                /*mPCommodity.Send(Close);
                                                if (m_QuoteSetting.IsWriteToDb) { m_WriteDBPool.Enqueue(Close); }*/
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][" + "Otc18 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                case 19:
                                    #region //上櫃當日暫停/恢復交易股票資料
                                    try
                                    {
                                    }
                                    catch (Exception ex)
                                    {
                                        ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithTse_Error][" + "Tse14 ERROR " + "][" + ex.Message + "][" + ex.StackTrace + "]");
                                    }
                                    break;
                                    #endregion
                                default:
                                    ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error][tCode=" + tCode + "] " + "Otc TRANSMISSION_CODE ERROR");
                                    break;
                            }
                            #endregion

                        }
                        catch (Exception ex)
                        {
                            ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc__Error] " + "[" + ex.Message + "][" + ex.StackTrace + "]");
                        }
                    }

                    Thread.Sleep(1);
                }
            }
            catch (ThreadAbortException ex2)
            {
            }
            catch (Exception ex)
            {
                ErrorProcess("[Quote][" + m_QuoteSetting.DataSource + "][" + DateTime.Now.ToString() + "][DealWithOtc_Error] " + "[" + ex.Message + "][" + ex.StackTrace + "]");
            }
        }
        